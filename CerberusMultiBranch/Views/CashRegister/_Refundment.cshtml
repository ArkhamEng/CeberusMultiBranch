@model CerberusMultiBranch.Models.ViewModels.Operative.RefundViewModel
@using CerberusMultiBranch.Support


@Scripts.Render("~/bundles/jqueryval")

<form id="formRefund">
    <div class="panel panel-danger">
        <div class="panel-heading">
            <button type="button" class="close" data-dismiss="modal">
                <span class="fa fa-times"></span>
            </button>
            <h3 class="panel-title">
                Aplicación de rembolso, monto total @Model.TotalRefund.ToMoney()
            </h3>
        </div>

        <div class="panel-body">
            <div class="col-md-12 text-center">
                <h4 class="bg-danger">
                    Se aplicara la devolucíon por cancelación para  <u class="text-uppercase">@Model.RefundClient</u>, ¿deseas continuar?
                </h4>
            </div>

            <div class="col-md-12 small">
                <div class="form-group col-md-3">
                    <label>En efectivo</label>
                    @Html.EditorFor(model => model.RefundCash, new { htmlAttributes = new { @class = "form-control  input-sm", type = "number" } })
                </div>
                <div class="form-group col-md-3">
                    <label>En vale</label>
                    @Html.EditorFor(model => model.RefundCredit, new { htmlAttributes = new { @class = "form-control  input-sm", type = "number" } })
                </div>

                <div class="form-group col-md-6 center-block">
                    <label>IFE (solo para vale)</label>
                    @Html.EditorFor(model => model.Ident, new { htmlAttributes = new { @class = "form-control input-sm", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.Ident, "", new { @class = "text-danger" })
                </div>

                <div class="form-group col-md-12">
                    <label>Recibido por</label>
                    @Html.EditorFor(model => model.ReceivedBy, new { htmlAttributes = new { @class = "form-control text-uppercase  input-sm", autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.ReceivedBy, "", new { @class = "text-danger" })
                </div>


            </div>
        </div>

        <div class="panel-footer clearfix">
            <div class="pull-right">
                <button class="btn btn-primary" type="button" onclick="ApplyRefund()">
                    <span class="fa fa-check"></span>
                    Aplicar
                </button>

                <button class="btn btn-danger" type="button" onclick="HideModal(null,true)">
                    <span class="fa fa-times"></span>
                    Cancelar
                </button>
            </div>
        </div>
    </div>
</form>
@Html.HiddenFor(m => m.RefundClientId)
@Html.HiddenFor(m => m.RefundSaleId)
@Html.HiddenFor(m => m.TotalRefund)

<script>
    $(document).ready(function () {
        var form = $("#formRefund");
        form.validate();

        $("#RefundCash").off('keyup').keyup(function () {
            var val = $("#RefundCash").val();
            var result = CalculateRefund(val);

            result = parseFloat(result).toFixed(2);

            $("#RefundCredit").val(result);

            if (result < 0) {
                $("#RefundCredit").val(0);
                $("#RefundCash").val($("#TotalRefund").val());
            }

            EvalCredit();
        });

        $("#RefundCredit").off('keyup').keyup(function () {
            var val = $("#RefundCredit").val();
            var result = CalculateRefund(val);

            result = parseFloat(result).toFixed(2);

            $("#RefundCash").val(result);

            if (result < 0) {
                $("#RefundCash").val(0);
                $("#RefundCredit").val($("#TotalRefund").val());
            }

            EvalCredit();
        });

        EvalCredit();
    });

    function EvalCredit() {
        var Ammount = parseFloat($("#RefundCredit").val());

        if (Ammount > 0)
            $("#Ident").attr("disabled", false);
        else
            $("#Ident").attr("disabled", true);
    }

    function CalculateRefund(val) {
        var total = parseFloat($("#TotalRefund").val());

        var result = (total - parseFloat(val));

        return result;
    }

    function ApplyRefund() {
        var form = $("#formRefund");

        if (!form.valid())
            return;

        HideModal(function ()
        {
            ShowLoading('static');

            var ref =
                {
                RefundClientId: $("#RefundClientId").val(),
                RefundSaleId: $("#RefundSaleId").val(),
                RefundCash: $("#RefundCash").val(),
                RefundCredit: $("#RefundCredit").val(),
                Ident: $("#Ident").val(),
                ReceivedBy: $("#ReceivedBy").val()
            }

            ExecuteAjax('@Url.Action("CreateRefund","CashRegister")', { refund: ref }, function (response) {
                HideLoading(function () {
                    CheckRefunding();
                    $("#divPrinter").html(response);
                });
            });

        }, true);
    }

    function GetCreditNote(id) {
        ExecuteAjax('@Url.Action("PrintCreditNote")', { noteId: id }, function (response) {
            $("#divPrinter").html(response);
            PrintCreditNote();
        });
    }
</script>