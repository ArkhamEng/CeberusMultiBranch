@model CerberusMultiBranch.Models.ViewModels.Operative.ChoosePaymentViewModel
@using CerberusMultiBranch.Models.Entities.Operative;
@using CerberusMultiBranch.Support


<div id="RegistPaymentContent" class="panel panel-success">
    <div class="panel-heading clearfix">
        <button type="button" class="close" data-dismiss="modal" style="float:right">
            <span class="fa fa-times"></span>
        </button>
        
            <div class="col-md-5">
                <strong> @Model.Details.First().Sale.Folio</strong><br />
                <a class="text-capitalize">
                    @Model.Client.ToLower()
                </a>
            </div>
            <div class="col-md-2 text-center">
                <strong>Total </strong> @Model.Details.First().Sale.TotalTaxedAmount.ToMoney()<br />
                <a class="text-capitalize">
                    @Model.Delivery.ToLower()
                </a>
            </div>
            <div class="col-md-3 text-right pull-right">
                <strong>Por Cobrar </strong>@Model.AmountToPay.ToMoney()<br />
                <a class="text-capitalize">
                    @Model.User.ToLower()
                </a>
            </div>
        
    </div>
    <div class="panel-body">

        <div class="panel panel-default">
            <div class="panel-body" style="overflow-y:auto; max-height:320px">
                <table id="tbDetails" class="table table-bordered small">
                    <thead>
                        <tr>
                            <th></th>
                            <th>
                                @Html.DisplayName("Código")
                            </th>
                            <th>
                                @Html.DisplayName("Descripción")
                            </th>
                            <th>
                                @Html.DisplayName("Precio")
                            </th>
                            <th>
                                @Html.DisplayName("Cantidad")
                            </th>
                            <th>
                                @Html.DisplayName("Total")
                            </th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in Model.Details)
                        {
                            <tr>
                                <td class="col-md-1" align="center">
                                    @if (item.Product.Images.Count > 0)
                                    {
                                        <img class="img-responsive" src="@item.Product.Images.FirstOrDefault().Path" style="max-height:50px" />
                                    }
                                    else
                                    {
                                        <img class="img-responsive" src="~/Content/Images/sinimagen.jpg" style="max-height:50px" />
                                    }
                                </td>
                                <td>
                                    @Html.DisplayFor(m => item.Product.Code)
                                </td>
                                <td>
                                    @Html.DisplayFor(m => item.Product.Name)<br />
                                    <label>Por </label>  @Html.DisplayFor(m => item.Product.TradeMark)
                                    <label>  Unidad </label>  @Html.DisplayFor(m => item.Product.Unit)
                                </td>
                                <td>
                                    @Html.DisplayFor(m => item.TaxedPrice)
                                </td>
                                <td>
                                    @Html.DisplayFor(m => item.DueQuantity)
                                </td>
                                <td>
                                    @Html.DisplayFor(m => item.TaxedAmount)
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>

        <div id="divPayments" class="panel panel-default hidden">
            <div class="panel-heading clearfix">
                @if (Model.Details.First().Sale.TransactionType == TransactionType.Cash)
                    {
                    <label>Registre el pago exacto de la venta de contado</label>
                    }
                    else
                    {
                    <label>Registre el monto del anticipo (opcional) </label>
                    }
                <div class="pull-right">
                    <label class="text-danger"> Total Ingresado $ <a id="total"></a></label>
                </div>
            </div>
            <div class="panel-body">
                <div id="Mix">
                    <div class="form-group col-md-3">
                        <div class="input-group">
                            <span class="input-group-addon">
                                Efectivo
                            </span>
                            @Html.EditorFor(model => model.CashAmount, new { htmlAttributes = new { @class = "form-control input-sm", type = "number" } })
                        </div>
                    </div>

                    <div class="form-group col-md-3">
                        <div class="input-group">
                            <span class="input-group-addon">
                                Tarjeta
                            </span>
                            @Html.EditorFor(model => model.CardAmount, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                        </div>
                    </div>
                </div>

                <div id="Ref">
                    <div class="form-group col-md-6">

                        <div class="input-group">
                            <span class="input-group-addon">
                                Vale
                            </span>
                            @Html.EditorFor(model => model.Folio, new { htmlAttributes = new { @class = "form-control bg-success", placeholder = "Folio de vale ó Número de IFE", list = "Folios" } })
                            <datalist id="Folios"></datalist>
                        </div>
                    </div>
                </div>

                <div class="form-group col-md-6">
                    <div class="input-group">
                        <span class="input-group-addon">
                            Referencia
                        </span>
                        @Html.EditorFor(model => model.Reference, new { htmlAttributes = new { @class = "form-control", placeholder = "REFERENCÍA BANCARIA" } })
                    </div>
                </div>
                <div class="form-group col-md-3">
                    <div class="input-group">
                        <span class="input-group-addon">
                            Expira
                        </span>
                        @Html.EditorFor(model => model.Expiration, new { htmlAttributes = new { @class = "form-control", disabled = true } })
                    </div>
                </div>

                <div class="form-group col-md-3 pull-right">
                    <div class="input-group">
                        <span class="input-group-addon">
                            Monto vale
                        </span>
                        @Html.EditorFor(model => model.CreditNoteAmount, new { htmlAttributes = new { @class = "form-control", disabled = true } })
                    </div>
                </div>
            </div>
        </div>



        <div id="divRefund" class="panel panel-default hidden">
            <div class="panel-heading clearfix">
                <label>Aplicación de devolución</label>

                <div class="pull-right">
                    <label class="text-danger"> Devolución $ @(Model.AmountToPay * -1)</label>
                </div>
            </div>
            <div class="panel-body">
                <div class="col-md-12 small">
                    <div class="form-group col-md-3">
                        <label>En efectivo</label>
                        @Html.EditorFor(model => model.RefundCash, new { htmlAttributes = new { @class = "form-control  input-sm", type = "number" } })
                    </div>
                    <div class="form-group col-md-3">
                        <label>En vale</label>
                        @Html.EditorFor(model => model.RefundCredit, new { htmlAttributes = new { @class = "form-control  input-sm", type = "number" } })
                    </div>

                    <div class="form-group col-md-6 center-block">
                        <label>IFE (solo para vale)</label>
                        @Html.EditorFor(model => model.Ident, new { htmlAttributes = new { @class = "form-control input-sm", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.Ident, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-12">
                        <label>Recibido por</label>
                        @Html.EditorFor(model => model.ReceivedBy, new { htmlAttributes = new { @class = "form-control text-uppercase  input-sm", autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.ReceivedBy, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>


        @Html.HiddenFor(model => model.AmountToPay)
        @Html.HiddenFor(model => model.SaleId)
    </div>
    <div class="panel-footer clearfix">
        <div class="pull-right">

            <button id="btnRegistNote" class="btn btn-primary btn-sm" type="button" title="Imprimir Nota">
                <span class="fa fa-file"></span>
                Imprimir Nota
            </button>

            <button id="btnRegistTicket" class="btn btn-info btn-sm" type="button" title="Imprimir ticket">
                <span class="fa fa-ticket"></span>
                Imprimir Ticket
            </button>


            <button class="btn btn-danger btn-sm" type="button" onclick="HideModal(null,true)">
                <span class="fa fa-times"></span>
                Cerrar
            </button>

        </div>
    </div>
    @Html.HiddenFor(m => m.CreditNoteId)
</div>


<script>
    $(document).ready(function () {
        SetInputEvents();

        Compleate("#Folio", "#Folios", '@Url.Action("AutoCompleate","CashRegister")', function (id, value) {
            OnFolioSelected(id, value);
        });

        SumAmount();

        BindRegistButtons();

        var amountToPay = parseFloat($("#AmountToPay").val());

        console.log(amountToPay);
        //si el monto a pagar es menor o igual con cero, no se recibe ningun pago
        if (amountToPay > 0)
            $("#divPayments").removeClass("hidden");

        if (amountToPay < 0)
            $("#divRefund").removeClass("hidden");
    });


    function BindRegistButtons() {
        $("#btnRegistNote").off('click').on('click', function () {
            $("#btnRegistNote").off('click');
            RegisterPayment(2);
        });

        $("#btnRegistTicket").off('click').on('click', function () {
            $("#btnRegistTicket").off('click');
            RegisterPayment(1);
        });
    }

    function SetInputEvents() {
        $("#CashAmount").off('keyup').keyup(function () {
            if ('@Model.Details.First().Sale.TransactionType' == TranType.Cash.Name) {
                var val = $("#CashAmount").val();
                var result = Calculate(val);

                result = parseFloat(result).toFixed(2);

                $("#CardAmount").val(result);
            }

            SumAmount();
        });

        $("#CardAmount").off('keyup').keyup(function () {
            if ('@Model.Details.First().Sale.TransactionType' == TranType.Cash.Name) {
                var val = $("#CardAmount").val();
                var result = Calculate(val);

                result = parseFloat(result).toFixed(2);

                $("#CashAmount").val(result);
            }

            SumAmount();
        });

        //cuando se limpia el campo de folio
        $("#Folio").off('keyup').keyup(function (e) {
            if (e.keyCode == undefined || e.keyCode == 9 || e.keyCode == 13)
                return;

            if (!$("#Folio").hasClass('alert-info'))
                return;

            if ('@Model.Details.First().Sale.TransactionType' == TranType.Cash.Name) {
                $("#CashAmount").val($("#AmountToPay").val());
            }

            $("#Reference").val('');
            $("#CardAmount").val(0);
            $("#CreditNoteId").val(0);
            $("#CreditNoteAmount").val(0);

            $("#Expiration").val('');


            $("#CashAmount").attr("disabled", false);
            $("#CardAmount").attr("disabled", false);
            $("#Reference").attr("disabled", false);

            $("#Folio").removeClass('alert-info');

            SumAmount();
        });


    }


    function OnFolioSelected(id, value) {
        $("#CreditNoteId").val(id);

        $("#Folio").removeClass('alert-info');

        ExecuteAjax('@Url.Action("GetFolioAmount")', { id: id }, function (response) {
            console.log(response);
            $("#CreditNoteAmount").val(response.Extra);
            $("#Expiration").val(response.Body);
            $("#Folio").val(response.Header);

            $("#Folio").addClass('alert-info');

            var tot = parseFloat($("#AmountToPay").val());

            //si el monto del vale excede o es igual a la cantidad  pagar, inhibo el ingreso de otra forma de pago
            if (response.Extra > tot || response.Extra == tot) {
                $("#CashAmount").val(0);
                $("#CashAmount").attr("disabled", true);

                $("#CardAmount").val(0);
                $("#CardAmount").attr("disabled", true);

                $("#Reference").val('');
                $("#Reference").attr("disabled", true);
            }

                //de otra forma si la venta es de contado, recalculo el monto a pagar
            else if ('@Model.Details.First().Sale.TransactionType' == TranType.Cash.Name) {
                var cash = parseFloat($("#AmountToPay").val()) - response.Extra;
                $("#CashAmount").val(cash);
                $("#CardAmount").val(0);
                $("#Reference").val('');
            }
            else {
                $("#CashAmount").val(0);
                $("#CardAmount").val(0);
                $("#Reference").val('');
            }

            SumAmount();
        });
    }

    function SumAmount() {
        var amount = parseFloat($("#CashAmount").val()) + parseFloat($("#CardAmount").val()) + parseFloat($("#CreditNoteAmount").val());
        $("#total").text(amount.toFixed(2));
    }

    function Calculate(val) {
        var total = parseFloat($("#AmountToPay").val()) - parseFloat($("#CreditNoteAmount").val());

        var result = (total - parseFloat(val));

        if (result < 0)
            result = 0;

        return result;
    }

    function RegisterPayment(printType) {
        if (parseFloat($("#CashAmount").val()) < 0 || parseFloat($("#CashAmount").val()) < 0) {
            ShowNotify("Cantidad Incorrecta!", "warning",
                "Los pagos no pueden incluir cantidades negativas, por favor ajuste las cantidades de manera correcta", 3000);
            return;
        }

        ShowModLoading();

        var param = {
            SaleId: $("#SaleId").val(),
            CashAmount: $("#CashAmount").val(),
            CardAmount: $("#CardAmount").val(),
            Reference: $("#Reference").val(),
            CreditNoteId: $("#CreditNoteId").val(),
            CreditNoteAmount: $("#CreditNoteAmount").val(),
            PrintType: printType
        };

        console.log("Parametros de pago");
        console.log(param);

        ExecuteAjax('@Url.Action("RegistPayment")', { payment: param }, function (response) {
            HideModLoading(function () {
                HideModal(function () {
                    CheckPendingPayments();
                    $("#divPrinter").html(response);

                }, true);
            });

        }, BindRegistButtons);
    }


</script>