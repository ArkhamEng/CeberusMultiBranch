@model CerberusMultiBranch.Models.ViewModels.Catalog.ClientViewModel
@using CerberusMultiBranch.Support
@{
    ViewBag.Title = "Registro de Clientes";
    ViewBag.Class = "fa fa-address-book";
}


@Scripts.Render("~/bundles/jqueryval")
<hr />
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(m => m.ClientId)

    @Html.HiddenFor(m => m.UpdDate)

    @Html.HiddenFor(m => m.IsActive)

    <div class="col-md-7">
        <div class="panel panel-danger">
            <div class="panel-body">
                <div class="row">
                    <div class="form-group col-md-4 ">
                        @Html.LabelFor(model => model.Entrance, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                            @Html.EditorFor(model => model.Entrance, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Entrance, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-4 col-md-offset-4">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-tag"></i></span>
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control", disabled = "disabled" } })
                            @*<span class="input-group-addon"><input type="checkbox" id="cbCode"></span>*@
                        </div>
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-user"></i></span>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control text-uppercase" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.City.StateId, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map"></i></span>
                            @Html.DropDownListFor(model => model.StateId, Model.States, "", htmlAttributes: new { @class = "form-control text-uppercase" })
                        </div>
                        @Html.ValidationMessageFor(model => model.City.StateId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-4 col-lg-offset-2">
                        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map-signs"></i></span>
                            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group  col-md-6">
                        @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map-o"></i></span>
                            @Html.DropDownListFor(mode => Model.CityId, Model.Cities, htmlAttributes: new { @class = "form-control text-uppercase" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-4 col-lg-offset-2">
                        @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-phone"></i></span>
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map-marker"></i></span>
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control text-uppercase" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group  col-md-8">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-at"></i></span>
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control text-lowercase" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group  col-md-4">
                        @Html.Label("Tipo", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-briefcase"></i></span>
                            @Html.DropDownListFor(mode => Model.Type, Model.Types, htmlAttributes: new { @class = "form-control text-uppercase" })
                        </div>
                        @Html.ValidationMessageFor(model => model.Type, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="panel-footer">

                @if (User.IsInRole("Capturista") || User.IsInRole("Vendedor") || User.IsInRole("Supervisor"))
                {
                    <div class="btn-group">
                        @Html.Partial("_CatalogButtonGroup")
                    </div>
                }
                else
                {
                    <button class="btn btn-primary" title="Volver a la búsqueda" type="button"
                            onclick="ShowLoading(); window.location = '@Url.Action("Index")'">
                        <span class="fa fa-search-plus"></span>
                    </button>
                }

            </div>
        </div>
    </div>

    <div class="col-md-5">
        <div class="panel panel-danger">
            <div class="panel-body">
                <div class="row">
                    <div class="form-group col-md-8">
                        @Html.LabelFor(model => model.FTR, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-id-badge"></i></span>
                            @Html.EditorFor(model => model.FTR, new { htmlAttributes = new { @class = "form-control text-uppercase" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.FTR, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.BusinessName, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-black-tie"></i></span>
                            @Html.EditorFor(model => model.BusinessName, new { htmlAttributes = new { @class = "form-control text-uppercase" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.BusinessName, "", new { @class = "text-danger" })
                    </div>


                 @if (User.IsInRole("Supervisor"))
                 {
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.CreditLimit, htmlAttributes: new { @class = "control-label" })

                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-credit-card-alt"></i></span>
                            @Html.EditorFor(model => model.CreditLimit, new { htmlAttributes = new { @class = "form-control text-uppercase", type = "number" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.CreditLimit, "", new { @class = "text-danger" })
                    </div>


                        <div class="form-group col-md-4 col-md-offset-2">
                            @Html.LabelFor(model => model.CreditDays, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-calendar-plus-o"></i></span>
                                @Html.EditorFor(model => model.CreditDays, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                            @Html.ValidationMessageFor(model => model.CreditDays, "", new { @class = "text-danger" })
                        </div>
                        <div class="form-group col-md-12">
                            @Html.LabelFor(model => model.CreditComment, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-comments"></i></span>
                                @Html.EditorFor(model => model.CreditComment, new { htmlAttributes = new { @class = "form-control" } })
                            </div>
                        </div>
                 }
                 else
                 {
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.CreditLimit, htmlAttributes: new { @class = "control-label" })

                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-credit-card-alt"></i></span>
                            <div class="form-control">
                                @Model.CreditLimit.ToMoney()
                                @Html.HiddenFor(model => model.CreditLimit)
                            </div>
                        </div>
                    </div>


                    <div class="form-group col-md-4 col-md-offset-2">
                        @Html.LabelFor(model => model.CreditDays, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-calendar-plus-o"></i></span>
                            <div class="form-control">
                                @Model.CreditDays
                                @Html.HiddenFor(model=> model.CreditDays)
                            </div>
                        </div>
                    </div>
                        <div class="form-group col-md-12">
                            @Html.LabelFor(model => model.CreditComment, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-comments"></i></span>
                                <div class="form-control">
                                    @Model.CreditComment
                                    @Html.HiddenFor(model => model.CreditComment)
                                </div>
                            </div>
                        </div>
                 }
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.CreditAvailable, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                            <div class="form-control">
                                @Model.CreditAvailable.ToMoney()
                            </div>
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.UsedAmount, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-piggy-bank"></i></span>
                            <div class="form-control">
                                @Model.UsedAmount.ToMoney()
                            </div>
                        </div>
                    </div>

                </div>
            </div>

        </div>
    </div>
}


<script>

    $(document).ready(LoadCreate);

    function LoadCreate()
    {
        SetCascade("#StateId", "#CityId", "GetCities");

        //$("#Code").attr("readonly", !$(this).is(':checked'));

        //$("#cbCode").click(function () {
        //    $("#Code").attr("readonly", !$(this).is(':checked'));
        //})

        $("#Name").keyup(FillNames);
     
        console.log("Create Client Loaded");
    }

    
    function FillNames() {
        $("#BusinessName").val($("#Name").val());
        $("#LegalRepresentative").val($("#Name").val());
    }
</script>


