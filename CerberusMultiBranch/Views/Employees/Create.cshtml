@model CerberusMultiBranch.Models.ViewModels.Catalog.EmployeeViewModel

@{
    ViewBag.Title = "Empleados";
}

<div class="col-md-11">
    <h3>
        <span class="fa fa-address-card" style="float:left"></span>
        &nbsp;&nbsp;Registro de Empleados
    </h3>
</div>

@Scripts.Render("~/bundles/jqueryval")

@using (Html.BeginForm("Create", "Employees", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    @Html.HiddenFor(m => m.EmployeeId)

    @Html.HiddenFor(m => m.UpdDate)

    @Html.HiddenFor(m => m.IsActive)

    <div class="col-md-8">
        <div class="panel panel-danger">
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-3">
                        <div class="btn-group-vertical thumbnail">
                            @if (Model.Picture == null)
                            {
                                <img id="imgEmployee" src="~/Content/Images/sinimagen.jpg" class="btn" />
                            }
                            else
                            {
                                var base64 = Convert.ToBase64String(Model.ClearImage);
                                var imgSrc = String.Format("data:{0};base64,{1}", Model.PictureType, base64);

                                <img id="imgEmployee" src="@imgSrc" class="btn" />
                            }
                            <label id="uplEmployee" class="btn btn-warning btn-xs">
                                <span class="fa fa-upload"></span>
                                Adjuntar foto
                                <input type="file" name="PostedFile" onchange="ImageLoaded(this)" style="display: none;">
                            </label>
                        </div>
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-tag"></i></span>
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })

                            <span class="input-group-addon"><input type="checkbox" id="cbCode" onclick="EditCode(this)"></span>
                        </div>
                    </div>

                    <div class="form-group col-md-4 col-md-offset-1">
                        @Html.LabelFor(model => model.Entrance, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                            @Html.EditorFor(model => model.Entrance, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Entrance, "", new { @class = "text-danger" })
                    </div>
                    <div class="form-group col-md-9">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-user"></i></span>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row">

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.City.StateId, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map"></i></span>
                            @Html.DropDownListFor(model => model.StateId, Model.States, "", htmlAttributes: new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.City.StateId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group  col-md-6">
                        @Html.LabelFor(model => model.CityId, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map-signs"></i></span>
                            @Html.DropDownListFor(mode => Model.CityId, Model.Cities, htmlAttributes: new { @class = "form-control" })
                        </div>
                        @Html.ValidationMessageFor(model => model.CityId, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-12">
                        @Html.LabelFor(model => model.Address, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map-marker"></i></span>
                            @Html.EditorFor(model => model.Address, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Address, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.ZipCode, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-map-signs"></i></span>
                            @Html.EditorFor(model => model.ZipCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.ZipCode, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-4 col-md-offset-4">
                        @Html.LabelFor(model => model.Phone, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-phone"></i></span>
                            @Html.EditorFor(model => model.Phone, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

            <div class="panel-footer">
                <div class="btn-group">
                    @Html.Partial("_CatalogButtonGroup")
                    <button type="button" class="btn btn-warning" onclick="ShowBranches()" id="btnBranches" disabled>
                        <span class="fa fa-building-o"></span>
                            Sucursales&nbsp;&nbsp; <span class="badge bg-danger">@Model.EmployeeBranches.Count</span> 
                    </button>
                </div>
            </div>
        </div>
    </div>


    <div id="divRegister" class="col-md-4 panel-group">
        <div class="panel panel-danger">
            <div class="panel-body">
                <h5>
                    <span class="fa fa-user-o" style="float:left"></span>
                    &nbsp;&nbsp;Asignacion de usuario
                </h5>
                <hr />
                @Html.Partial("_QuickUser")
            </div>
        </div>
        <div class="panel panel-danger">
            <div class="panel-body">
                <h5>
                    <span class="fa fa-building-o" style="float:left"></span>
                    &nbsp;&nbsp;Sucursales
                </h5>
                <hr />

            </div>
        </div>
    </div>
}

<div id="ModalBranchAssigment" class="modal" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content panel panel-danger panel-group">
            <div class="modal-header panel-heading">
                <h4 class="modal-title">
                    <span class="fa fa-building-o" style="float:left"></span>
                    &nbsp;&nbsp;Asiganción de sucursales
                </h4>
            </div>
            <div class="panel panel-danger">
                <div id="divBranchesAssigment" class="panel-body">

                </div>
            </div>
        </div>
    </div>
</div>

<script>

    $(document).ready(LoadCreate);

    function EditCode(checkBox) {
        console.log($(checkBox).is(':checked'));
        $("#Code").attr("readonly", !$(checkBox).is(':checked'));
    }

    function LoadCreate() {
        SetCascade("#StateId", "#CityId", "GetCities");

        console.log("Loading CreateClient");
        $("#Code").attr("readonly", true);

        if ('@Model.EmployeeId' > 0)
            $("#btnBranches").prop("disabled", false);

        console.log("Create Employee Loaded");
    }

    function AddRemoveBranch(branchId, add) {
        var param = { employeeId: $("#EmployeeId").val(), branchId: branchId, add: add };

        console.log(param);
        $.ajax({
            url: '@Url.Action("AddRemoveBranch", "Employees")',
            type: "POST",
            data: param,
            error: function (data) {
                console.log("Error Executing"); console.log(data);
            },
            statusCode:
            {
                200: function (view) {
                    $("#divBranchesAssigment").html(view);
                },
                401: function (data) {
                    alert('401: Unauthenticated');
                }
            }
        });
    }

    function ShowBranches() {
        $.ajax({
            url: '@Url.Action("GetBranchAssigment", "Employees")',
            type: "POST",
            data: { employeeId: $("#EmployeeId").val() },
            error: function (data) {
                console.log("Error Executing"); console.log(data);
            },
            statusCode:
            {
                200: function (view) {
                    $("#divBranchesAssigment").html(view);
                    $("#ModalBranchAssigment").modal('show');
                },
                401: function (data) {
                    alert('401: Unauthenticated');
                }
            }
        });
    }

    function ImageLoaded(input) {
        var files = input.files;

        var reader = new FileReader();

        reader.onload = function (e) {
            $("#imgEmployee").attr("src", e.target.result);
        }
        reader.readAsDataURL(files[0]);
    }
</script>


