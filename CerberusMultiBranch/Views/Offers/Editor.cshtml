@model CerberusMultiBranch.Models.Entities.Operative.Offer

<script src="~/AppScripts/OfferEditor.js"></script>

@{
    ViewBag.Title = "Gestión de Ofertas";
    ViewBag.Class = "fa fa-shopping-bag";
}

<hr />

@using (Html.BeginForm("Save", "Offers", FormMethod.Post, new { id = "SaveForm" }))
{
    @Html.AntiForgeryToken()

    <div class="panel panel-default small">
        <div class="panel-body row ">
            @Html.HiddenFor(m => m.OfferId)
            @Html.HiddenFor(m => m.Base64)
            @Html.HiddenFor(m => m.HasImage)

            <div class="col-md-5">
                <div class="panel panel-default">
                    <div class="panel-body">
                        <h3 class="ImageText">
                            @Model.Description
                        </h3>
                        <img id="detLg" class="img-responsive" alt="Large" src="@Model.ImagePath" style="width:100%" />
                        <button type="button" id="btnShowEditor" class="btn btn-primary btn-block btn-sm">
                            Editar Imagen
                        </button>
                    </div>

                </div>
            </div>

            <div class="col-md-7">
                <div class="panel panel-default">
                    <div class="panel-body">

                        <div class="form-group col-md-6">
                            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-tag"></i></span>
                                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control input-sm", @readonly = true } })
                            </div>
                        </div>

                        <div class="form-group col-md-5 col-md-offset-1">
                            @Html.LabelFor(model => model.Type, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-briefcase"></i></span>
                                @Html.EnumDropDownListFor(mode => Model.Type, htmlAttributes: new { @class = "form-control text-uppercase input-sm", Disabled = true })
                            </div>
                        </div>

                        <div class="form-group col-md-4">
                            @Html.LabelFor(model => model.BeginDate, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-calendar-minus-o"></i></span>
                                @Html.EditorFor(model => model.BeginDate, new { htmlAttributes = new { @class = "form-control input-sm DateStyle datepicker" } })
                            </div>
                        </div>

                        <div class="form-group col-md-4 col-md-offset-2">
                            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-calendar-plus-o"></i></span>
                                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control input-sm DateStyle", @value = Model.EndDate.ToString("dd/MM/yyyy") } })
                            </div>
                        </div>

                        @*<div class="form-group col-md-3">
                                @Html.LabelFor(model => model.MinQty, htmlAttributes: new { @class = "control-label" })
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-minus"></i></span>
                                    @Html.EditorFor(model => model.MinQty, new { htmlAttributes = new { @class = "form-control input-sm", @readonly = true } })
                                </div>
                            </div>

                            <div class="form-group col-md-3">
                                @Html.LabelFor(model => model.MaxQty, htmlAttributes: new { @class = "control-label" })
                                <div class="input-group">
                                    <span class="input-group-addon"><i class="fa fa-plus"></i></span>
                                    @Html.EditorFor(model => model.MaxQty, new { htmlAttributes = new { @class = "form-control input-sm", @readonly = true } })
                                </div>
                            </div>*@

                        <div class="form-group col-md-3">
                            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control input-sm", @readonly = true } })
                            </div>

                        </div>

                        <div class="form-group col-md-9">
                            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label" })
                            <div class="input-group">
                                <span class="input-group-addon"><i class="fa fa-comment"></i></span>
                                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control input-sm" } })
                            </div>
                        </div>

                        <div class="form-group col-md-4">
                            <div class="input-group">
                                <span class="input-group-addon">Sombra</span>
                                @Html.DropDownListFor(m => m.ShadowColor, (List<SelectListItem>)ViewBag.Colors, htmlAttributes: new { @class = "form-control input-sm" })

                            </div>
                        </div>

                        <div class="form-group col-md-4">
                            <div class="input-group">
                                <span class="input-group-addon">Texto</span>
                                @Html.DropDownListFor(m => m.TextColor, (List<SelectListItem>)ViewBag.Colors, htmlAttributes: new { @class = "form-control input-sm" })
                            </div>
                        </div>
                    </div>
                    <div class="panel-footer clearfix">
                        <div class="pull-right">

                            <buton type="button" id="btnGoToSearch" class="btn btn-info btn-sm">
                                <span class="fa fa-search"></span> Buscar
                            </buton>

                            <button type="submit" class="btn btn-primary btn-sm">
                                <span class="fa fa-save"></span> Guardar
                            </button>


                            <buton type="button" id="btnNew" class="btn btn-success btn-sm">
                                <span class="fa fa-file"></span> Nuevo
                            </buton>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


