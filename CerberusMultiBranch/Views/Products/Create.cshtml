@model CerberusMultiBranch.Models.ViewModels.Catalog.ProductViewModel
@using CerberusMultiBranch.Support;
@{

    ViewBag.Title = "Productos";
}


<div class="col-md-11">
    <h3>
        <span class="fa fa-car" style="float:left"></span>
        &nbsp;&nbsp;Edición de Productos
    </h3>
</div>
@section Scripts
{
    @Scripts.Render("~/bundles/jqueryval")
}


@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="col-md-12 panel-group">
        <div class="panel panel-default">
            <div class="panel-body">
                @Html.HiddenFor(model => model.ProductId)
                @Html.HiddenFor(model => model.IsActive)
                <div class="row">
                    <div class="form-group col-md-8">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-star-empty"></i></span>
                            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-3 col-md-offset-1">
                        @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-tag"></i></span>
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control text-right" } })
                            @*<span class="input-group-addon"><input type="checkbox" id="cbCode" onclick="EditCode(this)"></span>*@
                        </div>
                        @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="row">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.PartSystemId, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-list-alt"></i></span>
                            @Html.DropDownListFor(model => model.PartSystemId, Model.Systems, "", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.PartSystemId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.CategoryId, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-list-alt"></i></span>
                            @Html.DropDownListFor(model => model.CategoryId, Model.Categories, "", new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.CategoryId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="row col-md-3 col-md-offset-1">
                        <div class="form-group col-md-6">
                            @Html.Label("Modelos", htmlAttributes: new { @class = "control-label" })
                            <div class="input-group" id="divModComp">
                                <span class="input-group-addon"><i class="fa fa-car"></i></span>
                                @Html.TextBox("Compatibilities", "", htmlAttributes: new { @class = "form-control disabled" })
                            </div>
                        </div>

                        <div class="form-group col-md-6">
                            @Html.Label("Imagenes", htmlAttributes: new { @class = "control-label" })
                            <div class="input-group" onclick="ShowImages()">
                                <span class="input-group-addon"><i class="fa fa-camera"></i></span>
                                @Html.TextBox("Pictures", "", htmlAttributes: new { @class = "form-control disabled" })
                            </div>
                        </div>
                        <label id="lblMessageModel" class="text-danger" />
                        <label id="lblMessage" class="text-danger" />
                    </div>

                    <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.TradeMark, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-registration-mark"></i></span>
                            @Html.EditorFor(model => model.TradeMark, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.TradeMark, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-3 form-group">
                        @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-balance-scale"></i></span>
                            @Html.EditorFor(model => model.Unit, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-3 col-md-offset-2">
                        @Html.Label("Tipo de producto", htmlAttributes: new { @class = "control-label" })
                        <div class="form-control">
                            <label class="radio-inline">
                                <input type="radio" value="0" name="ProductType"  onchange="ShowSingle()"  id="rbSingle" />
                                Individual
                            </label>
                            <label class="radio-inline">
                                <input type="radio"  value="1" name="ProductType" onchange="ShowPackage()" id="rbPackage"/>
                                Paquete
                            </label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="panel panel-danger" id="divSingle">
            <div class="panel-body">
                <div class="row">
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.StorePercentage, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                            @Html.EditorFor(model => model.StorePercentage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StorePercentage, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.DealerPercentage, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                            @Html.EditorFor(model => model.DealerPercentage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DealerPercentage, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.WholesalerPercentage, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                            @Html.EditorFor(model => model.WholesalerPercentage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.WholesalerPercentage, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-2 col-md-offset-2">
                        @Html.LabelFor(model => model.BuyPrice, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                            @Html.EditorFor(model => model.BuyPrice, new { htmlAttributes = new { @class = "form-control", @type = "number", @min = "0", @step = "0.5", @value = "0" } })
                            @Html.ValidationMessageFor(model => model.BuyPrice, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.MinQuantity, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-calculator"></i></span>
                            @Html.EditorFor(model => model.MinQuantity, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.MinQuantity, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.StorePrice, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                            @Html.EditorFor(model => model.StorePrice, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.StorePrice, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.DealerPrice, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                            @Html.EditorFor(model => model.DealerPrice, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.DealerPrice, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-2 form-group">
                        @Html.LabelFor(model => model.WholesalerPrice, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                            @Html.EditorFor(model => model.WholesalerPrice, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.WholesalerPrice, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-4 col-md-offset-2">
                        @Html.LabelFor(model => model.BarCode, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-barcode"></i></span>
                            @Html.EditorFor(model => model.BarCode, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.BarCode, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
        </div>

        <div class="panel panel-danger">
            <div class="panel-body">
                <div class="row">
                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Row, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-bars"></i></span>
                            @Html.EditorFor(model => model.Row, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Row, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-md-2">
                        @Html.LabelFor(model => model.Ledge, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-archive"></i></span>
                            @Html.EditorFor(model => model.Ledge, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.Ledge, "", new { @class = "text-danger" })
                    </div>

                    <div class="col-md-2 form-group">
                        @Html.Label("Precio del paquete", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-usd"></i></span>
                           @Html.EditorFor(model => model.PackagePrice, new { htmlAttributes = new { @class = "form-control" } })
                        </div>
                        @Html.ValidationMessageFor(model => model.StorePrice, "", new { @class = "text-danger" })
                    </div>

                    <div class="btn-group  col-md-12">
                        @Html.Partial("_CatalogButtonGroup")

                        <button type="button" class="btn btn-default" id="btnUpload" title="Subir imagenes">
                            <span class="fa fa-cloud-upload" />
                        </button>
                        <button type="button" class="btn btn-default" id="btnAddProducts" title="Agregar productos al paquete">
                            <span class="fa fa-plus" />
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div id="divImagesModal" class="modal fade" role="dialog">
        <div class="modal-dialog">
            <div class="modal-content panel panel-danger">
                <div id="divImages" class="modal-body panel-body" style="height:150px;  overflow-y: scroll;">
                </div>

                <div id="divUploader" class="modal-footer panel-footer">
                    <label id="upl0" class="btn btn-warning btn-file ">
                        <span class="glyphicon glyphicon-picture" />
                        <input type="file" name="Files" onchange="ImageLoaded(this)" style="display: none;"/>
                    </label>
                </div>
            </div>
        </div>
    </div>

    @Html.Partial("_CarModelSelector", Model)

}

<div class="divImages">

</div>

<div id="divImagesLoaded" class="modal" role="dialog">
    <div class="modal-dialog">
        <div id="imgPartial" class="modal-content">
            @Html.Partial("_ImagesLoaded", Model.Images)
        </div>
    </div>
</div>


<script>
    var imgLoaded = 0;
    var count = 0;

    $(document).ready(function ()
    {
        SetControls();
        //$("#Code").attr("readonly", true);
        $("#Pictures").attr("readonly", true);
        $("#Compatibilities").attr("readonly", true);

        $("#Compatibilities").val('@Model.Compatibilities.Count');

        $("#StorePrice").attr("readonly", true);
        $("#WholesalerPrice").attr("readonly", true);
        $("#DealerPrice").attr("readonly", true);


        $("#StorePercentage").keyup(SetPrice);
        $("#StorePercentage").click(SetPrice);

        $("#WholesalerPercentage").keyup(SetPrice);
        $("#WholesalerPercentage").click(SetPrice);

        $("#DealerPercentage").keyup(SetPrice);
        $("#DealerPercentage").click(SetPrice);

        $("#BuyPrice").keyup(SetPrice);
        $("#BuyPrice").click(SetPrice);


        $("#btnUpload").click(function () { $("#divImagesModal").modal(); });
        $("#divModComp").click(function () { $("#divCompModal").modal(); });

        $("#Code").change(CheckCode);



        if ('@ViewBag.Message'.length > 0)
        {
            ShowMessage('@ViewBag.Header', '@ViewBag.Message', 'warning')
        }
    });

    function SetControls()
    {
        console.log('@Model.ProductType');
        if('@Model.ProductType' == 'Package')
        {
            $("#rbPackage").attr("checked",true)
            ShowPackage();
        }
        else
        {
            ShowSingle();
        }
    }

    function ShowSingle()
    {
        $("#btnAddProducts").hide();
        $("#txtPackagePrice").hide();
        $("#divSingle").show();
    }

    function ShowPackage()
    {
        $("#divSingle").hide();
        $("#btnAddProducts").show();
        $("#btnAddProducts").show();
    }

    function CheckCode()
    {
        ExecuteAjax('@Url.Action("CheckProductCode", "Json")', { code: $("#Code").val() }, function (exist) {
            if (exist)
                ShowMessage("Dato duplicado!", "este código de producto ya existe", "warning");
        });
    }

    function ShowCompatibilities() {
        ExecuteAjax('@Url.Action("GetModels", "CarModels")', {}, function (view) {
            $("#divComp").html(view);
            $("#divCompModal").modal();
        });
    }

    function SetPrice() {
        var sp = (1 + $("#StorePercentage").val() / 100);
        var dp = (1 + $("#WholesalerPercentage").val() / 100);
        var wp = (1 + $("#DealerPercentage").val() / 100);

        $("#StorePrice").val(($("#BuyPrice").val() * sp).toFixed(0));
        $("#WholesalerPrice").val(($("#BuyPrice").val() * dp).toFixed(0));
        $("#DealerPrice").val(($("#BuyPrice").val() * wp).toFixed(0));
    }

    function EditCode(checkBox) {
        $("#Code").attr("readonly", !$(checkBox).is(':checked'));
    }

    function ShowImages() {
        $("#divImagesLoaded").modal();
    }

    function DropImage(index) {
        $("#div" + index).remove();

        $("#upl" + index).remove();

        count--;
        console.log(count);

        if (count == 0)
            $("#lblMessage").text("");
        else
            $("#lblMessage").text("Imagenes a cargar " + count);

    }

    function ImageLoaded(input) {
        var files = input.files;

        var reader = new FileReader();

        reader.onload = function (e) {
            $('#divImages').append(" <div id='div" + imgLoaded + "' class='thumbnail col-md-4' ><a class='close'  onclick='DropImage(" + imgLoaded + ")'>×</a><img  src='" + e.target.result + "' class='img-responsive' style='min-height:50px;height:70px;'/>");
            console.log("Imagen Index " + imgLoaded);

            imgLoaded++;

            AddUploader();
        }
        reader.readAsDataURL(files[0]);

        $(input).closest("label").hide();
    }

    function AddUploader() {
        console.log("Creating Upload " + imgLoaded);

        var ctrl = ' <label id="upl' + imgLoaded + '" class="btn btn-warning btn-file ">' +
                    '<span class="glyphicon glyphicon-folder-open" />' +
                    '<input  type="file" name="Files" multiple onchange="ImageLoaded(this)" style="display: none;">' +
                    '</label>';

        $('#divUploader').append(ctrl);

        count++;
        $("#lblMessage").text("Imagenes a cargar " + count);
    }

    function Preview(input) {
        var files = input.files;

        if (files && files[0]) {
            var j = 0;
            //console.log("Allow Attach Files " + files.length);
            for (var i = 0, file; file = files[i]; i++) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    console.log("Read Image " + j);

                    if (j == 0) {
                        console.log("Setting Active Image");
                        $('#olSlides').append("  <li data-target='#myCarousel' data-slide-to='" + j + "' class='active'></li>")
                        $('#divGallery').append(" <div class='item active'><img  src='" + e.target.result + "' /></div>")
                    }
                    else {
                        console.log("Place Images ");
                        $('#olSlides').append("  <li data-target='#myCarousel' data-slide-to='" + j + "' ></li>")
                        $('#divGallery').append(" <div class='item'><img  src='" + e.target.result + "' /></div>")
                    }
                    j++;
                }

                console.log("Loading Image " + i);
                reader.readAsDataURL(file);
            }
        }
    }

</script>
