
@model CerberusMultiBranch.Models.ViewModels.Operative.BeginPurchaseViewModel

@Scripts.Render("~/bundles/jqueryval")

<form id="frmBeginPurchase">
    <div class="panel panel-primary">
        <div class="panel-heading">
            <button type="button" class="close" onclick="HideModal(null,true)">
                <span class="fa fa-times"></span>
            </button>
            <h4 class="panel-title">
                <span class="fa fa-shopping-basket"></span>
                Registro de nueva compra
            </h4>
        </div>
        <div class="panel-body">

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.Bill, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-file-o"></i></span>
                    @Html.EditorFor(model => model.Bill, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.Bill, "", new { @class = "text-danger" })
            </div>


            <div class="col-md-6 form-group">
                <label>Tipo de compra </label>
                <div class="input-group">
                    @foreach (var type in Model.TransactionTypes)
                    {
                        <div class="input-group-addon">
                            <Label class="control-label">
                                @type.ToString()
                                @Html.RadioButtonFor(model => model.TransactionType, type)
                            </Label>
                        </div>
                    }
                </div>
            </div>



            <div class="form-group col-md-12">
                @Html.LabelFor(model => model.ProviderName, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-id-badge"></i></span>
                    @Html.EditorFor(model => model.ProviderName, new { htmlAttributes = new { @class = "form-control", list = "Providers" } })
                    <datalist id="Providers"></datalist>
                </div>
                @Html.ValidationMessageFor(model => model.ProviderName, "", new { @class = "text-danger" })
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                    @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control", type = "number" } })
                </div>
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>

            <div class="form-group col-md-8">
                @Html.LabelFor(model => model.Motive, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                    @Html.EditorFor(model => model.Motive, new { htmlAttributes = new { @class = "form-control", disabled = "true" } })
                </div>
                @Html.ValidationMessageFor(model => model.Motive, "", new { @class = "text-danger" })
            </div>

            <div class="form-group col-md-6">
                @Html.LabelFor(model => model.PurchaseDate, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-calendar-check-o"></i></span>
                    @Html.EditorFor(model => model.PurchaseDate, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.PurchaseDate, "", new { @class = "text-danger" })
            </div>

            <div id="divDays" class="form-group col-md-6">
                @Html.LabelFor(model => model.Days, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-calendar-minus-o"></i></span>
                    @Html.EditorFor(model => model.Days, new { htmlAttributes = new { @class = "form-control" } })
                </div>
                @Html.ValidationMessageFor(model => model.Days, "", new { @class = "text-danger" })
            </div>

        </div>
        <div class="panel-footer clearfix">
            <div class="pull-right">
                <button id="btnCreatePurchase" class="btn btn-primary" type="button">
                    <span class="fa fa-check"></span>
                    Aceptar
                </button>
                <button class="btn btn-danger" onclick="HideModal(null,true)" type="button">
                    <span class="fa fa-times"></span>
                    Cancelar
                </button>
            </div>
        </div>
    </div>

</form>

@Html.HiddenFor(model => model.ProviderId)

<script>

    $(document).ready(function ()
    {
        var form = $("#frmBeginPurchase");
        var val = form.validate();

        Compleate("#ProviderName", "#Providers", '@Url.Action("AutoCompleate","Providers")', function (id, value)
        {
            $("#ProviderId").val(id);
            $("#ProviderName").addClass("alert-info");
        });

        $("input[name=TransactionType]").click(function ()
        {
            if (this.value == 'Credito') {
                $("#divDays").removeClass("hidden");
            }
            else {
                $("#divDays").val(0);
                $("#divDays").addClass("hidden");
            }
        });

        $("#Discount").keyup(function () {
            var d = parseFloat($("#Discount").val());

            if (d > 0)
                $("#Motive").attr("disabled", false);
            else
                $("#Motive").attr("disabled", true);
        });

        $("#Discount").mouseup(function () {
            var d = parseFloat($("#Discount").val());

            if (d > 0)
                $("#Motive").attr("disabled", false);
            else
                $("#Motive").attr("disabled", true);
        });

        $("#ProviderName").off('keyup').keyup(function (e)
        {
            
            if (e.keyCode == undefined || e.keyCode == 9 || e.keyCode == 13)
                return;

            if (!$("#ProviderName").hasClass('alert-info'))
                return;

            $("#ProviderId").val("");
            $("#ProviderName").removeClass('alert-info');
        });

        $("#btnCreatePurchase").off("click").on("click", AcceptCreate);
    });



    function AcceptCreate()
    {
        var form = $("#frmBeginPurchase");

        if (!form.valid())
        {
            ShowNotify("Error de validación", "warning", "Se detectarón errores en los datos capturados, por favor verifique", 3000);
            return;
        }
            
        var purchase =
            {
                ProviderId: $("#ProviderId").val(),
                PurchaseDate: $("#PurchaseDate").val(),
                Days: $("#Days").val(),
                TransactionType: $("input[name=TransactionType]:checked").val(),
                Bill: $("#Bill").val(),
                Discount: $("#Discount").val(),
                Motive: $("#Motive").val()
            };
     
        ShowModLoading();

        ExecuteAjax('@Url.Action("Create","Purchases")', { model: purchase }, function (response)
        {
            window.location = '@Url.Action("Detail")/' + response.Id;
        }, function ()
        {
            $("#btnCreatePurchase").off("click").on("click", AcceptCreate);
        });
    }

</script>

