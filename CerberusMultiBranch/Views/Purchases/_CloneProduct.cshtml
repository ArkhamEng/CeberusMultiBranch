@model CerberusMultiBranch.Models.ViewModels.Catalog.ProductViewModel

<div id="ModalCloneProduct" class="modal fade" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content panel panel-danger panel-group">
            <div class="modal-header panel-heading">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h5 class="modal-title">Copia de producto</h5>
            </div>
            <div  class="modal-body panel-body panel-group">
                <img id="imgProd" src="~/Content/Images/loading.gif" class="img-responsive hide" />
                <div id="divProd" class="panel-body">
                    <div class="col-md-6 form-group">
                        @Html.Label("Codigo", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-tag"></i></span>
                            @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        @Html.Label("Categoría", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-list-alt"></i></span>
                            @Html.DropDownList("CategoryId", Model.Categories, new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="col-md-12 form-group">
                        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-registration-mark"></i></span>
                            @Html.TextAreaFor(model => model.Name, 3, 1, htmlAttributes: new { @class = "form-control", @readonly = "true" })
                            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-8 form-group">
                        @Html.Label("Marca", htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-registration-mark"></i></span>
                            @Html.EditorFor(model => model.TradeMark, new { htmlAttributes = new { @class = "form-control", @readonly = "true" } })
                            @Html.ValidationMessageFor(model => model.TradeMark, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.Unit, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="glyphicon glyphicon-bal"></i></span>
                            @Html.EditorFor(model => model.Unit, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Unit, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.StorePercentage, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                            @Html.EditorFor(model => model.StorePercentage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.StorePercentage, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.DealerPercentage, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                            @Html.EditorFor(model => model.DealerPercentage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.DealerPercentage, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-4 form-group">
                        @Html.LabelFor(model => model.WholesalerPercentage, htmlAttributes: new { @class = "control-label" })
                        <div class="input-group">
                            <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                            @Html.EditorFor(model => model.WholesalerPercentage, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.WholesalerPercentage, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <label id="lblMessage" class="text-center text-danger"></label>
                </div>
            </div>
            @Html.HiddenFor(model=> model.BuyPrice)
            <div class="modal-footer panel-footer">
                <button class="btn btn-primary" onclick="Copy()">
                    <span class="glyphicon glyphicon-save"></span>
                    Guardar
                </button>
            </div>
        </div>
    </div>
</div>
<script>
    $(document).ready(function ()
    {
        $("#ModalCloneProduct").modal("show");

        $('#ModalCloneProduct').on('hidden.bs.modal', function ()
        {
            EndAddRelation();
        });
    });

    function Copy()
    {
        $("#imgProd").attr("class", "img-responsive");
        $("#divProd").hide();

        var param = {
            Code: $("#Code").val(), CategoryId: $("#CategoryId").val(), TradeMark: $("#TradeMark").val(), Name: $("#Name").val(),
            WholesalerPercentage: $("#WholesalerPercentage").val(), DealerPercentage: $("#DealerPercentage").val(), BuyPrice: $("#BuyPrice").val(),
            StorePercentage: $("#StorePercentage").val(), Unit: $("#Unit").val()
        }

        ExecuteAjax('@Url.Action("Copy")', { product: param, externalId: $("#ExternalProductId").val() }, function (j)
        {
            if (j.Result != "OK")
            {
                $("#imgProd").attr("class", "img-responsive hide");
                $("#lblMessage").text(j.Result + '==>' + j.Message);
                $("#divProd").show();
            }
            else
            {
                $("#ModalCloneProduct").modal("hide");
            }
        });
    }
</script>
