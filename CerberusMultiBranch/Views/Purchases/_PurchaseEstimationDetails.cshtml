@model Dictionary<string, IEnumerable<CerberusMultiBranch.Models.ViewModels.Catalog.ProductViewModel>>

@using CerberusMultiBranch.Support
@using CerberusMultiBranch.Models.Entities.Purchasing


@foreach (var group in Model)
{
    <div class="panel panel-primary">
        <div class="panel-heading">
            <h5 class="panel-title text-center">
                <strong>
                    @group.Key
                </strong>
            </h5>
        </div>
        <div class="panel-body">
            <table class="table table-bordered small">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayName("Códigos")
                        </th>
                        <th>
                            @Html.DisplayName("Descripción")
                        </th>

                        <th>
                            @Html.DisplayName("Costo")
                        </th>
                        <th>
                            @Html.DisplayName("Descuento")
                        </th>

                        <th>
                            @Html.DisplayName("Inventario")
                        </th>

                        <th>
                            @Html.DisplayName("Máximo")
                        </th>

                        <th>
                            @Html.DisplayName("Cantidad")
                        </th>
                        <th>
                            @Html.DisplayName("Total")
                        </th>
                        <th>

                        </th>
                </thead>
                <tbody>
                    @foreach (var item in group.Value)
                    {
                        <tr>
                            <td>
                                Int: [@Html.DisplayFor(modelItem => item.Code)]<br />
                                Prov:[@Html.DisplayFor(modelItem => item.ProviderCode)]
                            </td>
                            <td style="min-width:280px">

                                @Html.HiddenFor(modelItem => item.ProductId)

                                @Html.DisplayUpperFor(modelItem => item.Name) <br />
                                <strong>Por</strong>  @Html.DisplayUpperFor(modelItem => item.TradeMark)
                            </td>

                            <td class="text-uppercase">
                                @Html.DisplayFor(modelItem => item.BuyPrice)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Discount) %
                            </td>

                            <td class="text-lowercase text-center">
                                @Html.DisplayFor(modelItem => item.Quantity)
                            </td>

                            <td class="text-uppercase  text-center">
                                @Html.DisplayFor(modelItem => item.MaxQuantity)
                            </td>

                            <td class="text-uppercase  text-center">
                                @Html.DisplayFor(modelItem => item.AddQuantity)
                            </td>
                            <td class="text-uppercase  text-center">
                                @Html.DisplayFor(modelItem => item.TotalLine)
                            </td>

                            <td>
                                <button type="button" class="btn btn-warning btn-sm" onclick="EditDetail('@item.BranchId','@item.ProductId')" title="has click para editar esta partida">
                                    <span class="fa fa-edit"></span>
                                </button>

                                <button type="button" class="btn btn-danger btn-sm" onclick="RemoveFromEstimation('@item.BranchId','@item.ProductId')" title="has click para remover esta partida">
                                    <span class="fa fa-trash"></span>
                                </button>
                              
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}



@{ var hasItems = (Model.Count() > Cons.Zero); }

<script>
    $(document).ready(function ()
    {
        $("#PuschaseType").change(function ()
        {
            var value = this.value;

            if ($("#PuschaseType").val() != '@Convert.ToInt16(PType.Credit)')
            {
                $("#DaysToPay").attr("disabled", true);
                $("#DaysToPay").val(0);
            }
            else
                $("#DaysToPay").removeAttr("disabled");
        });

        var hasItems = '@hasItems';

        if (hasItems == 'True')
        {
            $("#btnGenerate").removeAttr("disabled");
            $("#btnCancelAll").removeAttr("disabled");
            $("#btnQuickSearchProvider").attr("disabled", true);
        }
        else {
            $("#btnGenerate").attr("disabled", true);
            $("#btnCancelAll").attr("disabled", true);
            $("#btnQuickSearchProvider").removeAttr("disabled");
        }

        if ($("#ProviderId").val() == '' || $("#ProviderId").val() == 0)
            $("#btnBeginAddProduct").attr("disabled", true);
        else
            $("#btnBeginAddProduct").removeAttr("disabled");

    });


    function RemoveFromEstimation(branchId, productId)
    {
        ShowLoading('static');

        ExecuteAjax('@Url.Action("RemoveFromEstimation", "Purchases")', { branchId: branchId, productId: productId }, function (response) {
            HideLoading(function () {
                $("#divPurchaseDetails").html(response);
            });
        });
    }

    function EditDetail(branchId, productId)
    {
        ShowLoading('static');

        ExecuteAjax('@Url.Action("EditDetail", "Purchases")', { branchId: branchId, productId: productId }, function (response) {
            HideLoading(function ()
            {
                ShowModal(response, 'static');
            });
        });
    }
</script>