@model IEnumerable<CerberusMultiBranch.Models.ViewModels.Catalog.ProductViewModel>

@using CerberusMultiBranch.Support
@using CerberusMultiBranch.Models.Entities.Purchasing

<table id="tbPurchaseCartDetail" class="table dt-responsive table-bordered small hidden" style="width:100%">
    <thead>
        <tr>

            <th>
                @Html.DisplayName("Sucursal")
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Name)
            </th>

            <th>
                @Html.DisplayName("Costo")
            </th>

            <th>
                @Html.DisplayName("Inventario")
            </th>

            <th>
                @Html.DisplayName("Máximo")
            </th>

            <th>
                @Html.DisplayName("Cantidad")
            </th>
            <th>
                @Html.DisplayName("Total")
            </th>
            <th style="max-width:70px">
                <button class="btn btn-primary btn-xs" type="button" title="Agregar productos" id="btnBeginAddProduct" onclick="ShowProductQuickSearch()">
                    <span class="fa fa-plus"></span>
                    Agregar
                </button>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>

                <td>
                    <h5 style="text-align:center;">
                        <strong>
                            @Html.DisplayFor(modelItem => item.BranchName)
                        </strong>
                    </h5>
                </td>

                <td style="min-width:280px">

                    @Html.HiddenFor(modelItem => item.ProductId)
                    <strong>  Código Interno:</strong> @Html.DisplayFor(modelItem => item.Code)     -   <strong> Código Proveedor: </strong>  @Html.DisplayFor(modelItem => item.ProviderCode)

                    <br />
                    <p>
                        @Html.DisplayUpperFor(modelItem => item.Name) <br />
                        <strong>Por</strong>  @Html.DisplayUpperFor(modelItem => item.TradeMark)
                    </p>
                </td>

                <td class="text-uppercase">
                    @Html.DisplayFor(modelItem => item.BuyPrice)
                </td>

                <td class="text-lowercase text-center">
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>

                <td class="text-uppercase  text-center">
                    @Html.DisplayFor(modelItem => item.MaxQuantity)
                </td>

                <td class="text-uppercase  text-center" style="max-width:50px">
                    @Html.EditorFor(modelItem => item.AddQuantity, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off" } })
                </td>
                <td class="text-uppercase  text-center">
                    @Html.DisplayFor(modelItem => item.TotalLine)
                </td>

                <td>
                    <button type="button" class="btn btn-danger btn-xs" onclick="RemoveFromCart('@item.BranchId','@item.ProductId')" title="has click para remover esta partida">
                        <span class="fa fa-remove"></span>
                        Quitar
                    </button>
                </td>
            </tr>
        }
    </tbody>
</table>

@{ var hasItems = (Model.Count() > Cons.Zero); }

<script>
    $(document).ready(function ()
    {
        $("#tbPurchaseCartDetail").removeClass("hidden");

        GroupRow("#tbPurchaseCartDetail", 100, null, 0, 7);

        $("#PuschaseType").change(function () {
            var value = this.value;
       
            if ($("#PuschaseType").val() != '@Convert.ToInt16(PType.Credit)')
            {
                $("#DaysToPay").attr("disabled", true);
                $("#DaysToPay").val(0);
            }
            else
                $("#DaysToPay").removeAttr("disabled");
        });

        var hasItems = '@hasItems';

        if (hasItems == 'True')
        {
            $("#btnGenerate").removeAttr("disabled");
            $("#btnCancelAll").removeAttr("disabled");
            $("#btnQuickSearchProvider").attr("disabled", true);
            $("#PuschaseType").attr("disabled", true);
            $("#Comment").attr("disabled", true);
            $("#DaysToPay").attr("disabled", true);
        }
        else
        {
            $("#btnGenerate").attr("disabled", true);
            $("#btnCancelAll").attr("disabled", true);
            $("#btnQuickSearchProvider").removeAttr("disabled");
            $("#PuschaseType").removeAttr("disabled");
            $("#Comment").removeAttr("disabled");
            $("#DaysToPay").removeAttr("disabled");
        }

        if ($("#ProviderId").val() == '' || $("#ProviderId").val() == 0)
            $("#btnBeginAddProduct").attr("disabled", true);
        else
            $("#btnBeginAddProduct").removeAttr("disabled");

    });



    function RemoveFromCart(branchId, productId)
    {
        ShowLoading('static');

        ExecuteAjax('@Url.Action("RemoveFromEstimation", "Purchases")', { branchId: branchId, productId: productId }, function (response)
        {
            HideLoading(function ()
            {
                $("#divPurchaseDetails").html(response);
            });
        });
    }
</script>