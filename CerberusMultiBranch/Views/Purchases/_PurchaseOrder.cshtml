@model PurchaseOrder
@using CerberusMultiBranch.Models.Entities.Purchasing
@using CerberusMultiBranch.Models

@Html.HiddenFor(m => m.ProviderId)

@Html.HiddenFor(m => m.PurchaseOrderId)

<h4 id="divFolio" class="col-md-3 col-lg-2 alert alert-dark" title="Folio de la orden de compra">
    @Model.Folio
</h4>
<h4 id="divStatus" class="col-lg-offset-8 col-lg-2 col-md-offset-7 col-md-2" title="@Model.PurchaseStatus.Description">
    @Model.PurchaseStatus.Name<br />
</h4>

<hr />

<div class="panel panel-default">
    @Html.HiddenFor(model=> model.TaxRate)
    @Html.HiddenFor(model => model.TaxAmount)
    @Html.HiddenFor(model => model.TotalDue)

    <div class="panel-body small">
        <div class="form-group col-md-4">
            @Html.LabelFor(m => m.BranchId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-industry"></i></span>
                @Html.EditorFor(model => model.Branch.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-4">
            @Html.LabelFor(m => m.PurchaseTypeId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-map"></i></span>
                @Html.DropDownListFor(model => model.PurchaseTypeId, (SelectList)ViewBag.PurchaseTypes, htmlAttributes:
               new { @class = "form-control text-uppercase input-sm" })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(m => m.OrderDate, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                <div class="col-md-12" style="margin-left:-15px">
                    @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
                </div>
            </div>
        </div>


        <div class="form-group col-md-8">
            @Html.LabelFor(m => m.ProviderId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-handshake-o"></i></span>
                @Html.EditorFor(model => model.Provider.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>


        <div class="form-group col-md-2">
            @Html.LabelFor(m => m.DeliveryDate, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                <div class="col-md-12" style="margin-left:-15px">
                    @Html.EditorFor(model => model.DeliveryDate, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
                </div>
            </div>
        </div>

        @*<div class="form-group col-md-2">
                @Html.LabelFor(m => m.DueDate, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                    <div class="col-md-12" style="margin-left:-15px">
                        @Html.EditorFor(model => model.DueDate, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
                    </div>
                </div>
            </div>

            <div class="form-group col-md-2">
                @Html.LabelFor(m => m.ShipDate, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                    <div class="col-md-12" style="margin-left:-15px">
                        @Html.EditorFor(model => model.ShipDate, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
                    </div>
                </div>
            </div>

            <div class="form-group col-md-2">
                @Html.LabelFor(m => m.ShipMethodId, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-ship"></i></span>
                    @Html.DropDownListFor(model => model.ShipMethodId, (SelectList)ViewBag.ShipMethodes, htmlAttributes:
                   new { @class = "form-control text-uppercase input-sm" })
                </div>
            </div>*@

    </div>
    <div class="panel-footer">
        <button id="btnCheck" class="btn btn-primary btn-sm hidden" type="button" title="Autoriza la orden de compra y la envía por correo al proveedor" onclick="BeginRevision()">
            <span class="fa fa-check"></span>
            Revisar
        </button>

        <button id="btnSend" class="btn btn-primary btn-sm hidden" type="button" title="Autoriza la orden de compra y la envía por correo al proveedor" onclick="SendPurchaseOrder()">
            <span class="fa fa-paper-plane"></span>
            Enviar a Proveedor
        </button>

        <button id="btnReceive" class="btn btn-primary btn-sm hidden" type="button" title="Recibe los articulos en el almacen" onclick="Receive()">
            <span class="fa fa-cubes"></span>
            Recibir
        </button>
    </div>
</div>

<ul class="nav nav-pills small">
    <li class="active"><a data-toggle="pill" href="#Details">Partidas</a></li>
    <li><a data-toggle="pill" href="#History">Historia</a></li>
</ul>

<div class="tab-content">
    <div id="Details" class="tab-pane fade in active dtContainer">
        <div class="panel panel-default">
            <div class="panel-body dtContainer">
                @Html.Partial("_PurchaseOrderDetails", Model.PurchaseOrderDetails)
            </div>
        </div>
    </div>
    <div id="History" class="tab-pane fade">
        <div class="panel panel-default">
            <div class="panel-body dtContainer">
                @Html.Partial("_PurchaseOrderHistories", Model.PurchaseOrderHistories)
            </div>
        </div>
    </div>
</div>


<script>

    $(document).ready(function ()
    {
        if ('@Model.Folio'.length > 0)
        {
            $("#divFolio").removeClass("alert alert-dark");
            $("#divFolio").addClass("alert alert-success");
        }
            

        //status color
        switch ('@Model.PurchaseStatusId')
        {
            case '@PStatus.InRevision':
                $("#btnCheck").removeClass("hidden");
                $("#divStatus").addClass("alert alert-dark");
                break;
            case '@PStatus.Authorized':
                $("#btnSend").removeClass("hidden");
                $("#divStatus").addClass("alert alert-success");
                break;
            case '@PStatus.Sended':
                $("#divStatus").addClass("alert alert-info");
                $("#btnReceive").removeClass("hidden");
                break;

            case '@PStatus.Partial':
                $("#divStatus").addClass("alert alert-attention");
                break;

            case '@PStatus.Received':
                $("#divStatus").addClass("alert alert-success");
                break;
         
            case '@PStatus.NotAuthorized':
                $("#btnAction").removeClass("hidden");
                $("#divStatus").addClass("alert alert-attention");
                break;
            case '@PStatus.Rejected':
                $("#divStatus").addClass("alert alert-warning");
                break;
            case '@PStatus.Canceled':
                $("#divStatus").addClass("alert alert-danger");
                break;
        }
    });

    function BeginRevision() {
        ShowLoading('static');

        ExecuteAjax('@Url.Action("BeginRevision", "Purchases")', { id: $("#PurchaseOrderId").val() }, function (response) {
            HideLoading(function ()
            {
                if ($.isPlainObject(response))
                {
                    ShowNotify(response.Header, response.Result, response.Body, 3000);
                    Reload();
                }
                else
                    ShowModal(response, 'static');
            });
        });
    }

    function SendPurchaseOrder()
    {
        ShowLoading('static');

        ExecuteAjax('@Url.Action("SendPurchaseOrder", "Purchases")', { id: $("#PurchaseOrderId").val() }, function (response)
        {
            HideLoading(function ()
            {
                ShowNotify(response.Header, response.Result, response.Body, 3000);
                Reload();

            });
        });
    }

    function Receive()
    {
        ShowLoading();

        ExecuteAjax('@Url.Action("CompleateReception", "Purchases")', { items: ReceivedDetails, purchaseOrderId: $("#PurchaseOrderId").val() }, function (response)
        {
            HideLoading(function ()
            {
                $("#divPurchaseOrder").html(response);
            });
        });
    }

    function Reload()
    {
        ShowLoading();

        ExecuteAjax('@Url.Action("ReloadPurchaseOrder", "Purchases")', { id: $("#PurchaseOrderId").val() }, function (response)
        {
            HideLoading(function () {
                $("#divPurchaseOrder").html(response);
            });
        });
    }
</script>