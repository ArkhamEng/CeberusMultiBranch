@model PurchaseOrder
@using CerberusMultiBranch.Models.Entities.Purchasing
@using CerberusMultiBranch.Models
@using CerberusMultiBranch.Support



@Scripts.Render("~/bundles/PurchaseOrder")

@if (Model.PurchaseOrderId != Cons.Zero)
{
    <h4 id="divFolio" class="@Model.FolioStyle col-md-3 col-lg-2" title="Folio de la orden de compra" data-toggle="tooltip">
        @Model.Folio
    </h4>
    <h4 id="divStatus" class="@Model.StatusStyle col-lg-offset-8 col-lg-2 col-md-offset-7 col-md-2" title="@Model.PurchaseStatus.Description" data-toggle="tooltip">
        @Model.PurchaseStatus.Name<br />
    </h4>
}
<hr />

<div class="panel panel-default">

    @Html.HiddenFor(m => m.PurchaseOrderId)
    @Html.HiddenFor(model => model.BranchId)
    @Html.HiddenFor(model => model.ProviderId)

    @Html.HiddenFor(model => model.TaxAmount)
    @Html.HiddenFor(model => model.TotalDue)


    <div class="panel-body small">
        <div class="form-group col-md-4">
            @Html.LabelFor(m => m.BranchId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-industry"></i></span>
                @Html.EditorFor(model => model.Branch.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-3">
            @Html.LabelFor(m => m.PurchaseTypeId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-map"></i></span>
                @Html.EditorFor(model => model.PurchaseType.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>
        <div class="form-group col-md-2">
            @Html.Label("Días de Crédito", htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                @Html.EditorFor(model => model.DaysToPay, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(m => m.OrderDate, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                <div class="form-control text-uppercase input-sm">
                    @(Model.OrderDate != null ? Model.OrderDate.Value.ToString("dd/MM/yyyy") : "--/--/----")
                </div>
            </div>
        </div>

        <div class="form-group col-md-7">
            @Html.LabelFor(m => m.ProviderId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-handshake-o"></i></span>
                @Html.EditorFor(model => model.Provider.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.Label("IVA", htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                @Html.EditorFor(model => model.TaxRate, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>


        <div class="form-group col-md-2">
            @Html.LabelFor(m => m.DeliveryDate, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                <div class="form-control text-uppercase input-sm">
                    @(Model.DeliveryDate != null ? Model.DeliveryDate.Value.ToString("dd/MM/yyyy") : "--/--/----")
                </div>
            </div>
        </div>

        <div class="form-group col-md-3">
            @Html.LabelFor(m => m.ShipMethodId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-ship"></i></span>
                @Html.EditorFor(model => model.ShipMethod.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Freight, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.EditorFor(model => model.Freight, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Insurance, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.EditorFor(model => model.Insurance, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true, id = "txtDiscount" } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Bill, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-file-excel-o"></i></span>

                @if (!string.IsNullOrEmpty(Model.Bill))
                {
                    @Html.ActionLink(Model.Bill, "Detail", "Purchases", new { id = Model.Purchases.FirstOrDefault().PurchaseId },
                   new { @class = "form-control text-uppercase input-sm", onclick = "ShowLoading('static')" })
                }
                else
                {
                    @Html.EditorFor(model => model.Bill, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
                }

            </div>
        </div>

    </div>
    <div class="panel-footer clearfix">

        @Html.ActionLink(" Buscar", "PurchaseOrders", "Purchasing", null, new
   {
       @class = "fa fa-search btn btn-info",
       title = "volver a pantalla de búsqueda",
       data_toggle = "tooltip",
       onclick = "ShowLoading('static')"
   })


        @if (Model.CanRevise)
        {
            <button class="btn btn-primary btn-sm" type="button" data-toggle="tooltip" title="Revisia la orden para envíarla a autorización" onclick="BeginAction()">
                <span class="fa fa-eye"></span>
                Revisión
            </button>
        }

        @if (Model.CanAuthorize)
        {
            <button class="btn btn-primary btn-sm" type="button" data-toggle="tooltip" title="Autoriza la orden de compra" onclick="BeginAction()">
                <span class="fa fa-check"></span>
                Autorización
            </button>
        }

        @if (Model.CanSend)
        {
            <button class="btn btn-primary btn-sm" type="button" data-toggle="tooltip" title="Enviar por correo al proveedor, esta acción es opcional" onclick="BeginAction()">
                <span class="fa fa-paper-plane"></span>
                Enviar a Proveedor
            </button>
        }
        @if (Model.CanReceive)
        {
            <button id="btnReceive" class="btn btn-primary btn-sm" type="button" data-toggle="tooltip" title="Recibe los articulos en el almacen" onclick="BeginAction()">
                <span class="fa fa-cubes"></span>
                Recibir
            </button>
        }

        <button id="btnChange" class="btn btn-warning btn-sm hidden" type="button" title="Solicita autorización para agregar partidas" data-toggle="tooltip" onclick="BeginAction(true)">
            <span class="fa fa-paper-plane-o"></span>
            Solicitar Cambio
        </button>

        @if (string.IsNullOrEmpty(Model.Bill) && (Model.PurchaseStatusId == PStatus.Received || Model.PurchaseStatusId == PStatus.Partial))
        {
            <button class="btn btn-success btn-sm" type="button" data-toggle="tooltip" title="Genera una factura de compra asociada a la orden de compra" onclick="BeginBilling()">
                <span class="fa fa-file-excel-o"></span>
                Facturar
            </button>
        }

        <button class="btn btn-success btn-sm" type="button" data-toggle="tooltip" title="Imprime la orden de compra" onclick="Print()">
            <span class="fa fa-print"></span>
            Imprimir
        </button>

    </div>
</div>

<ul class="nav nav-pills small">
    <li class="active"><a data-toggle="pill" href="#Details">Partidas</a></li>
    <li><a data-toggle="pill" href="#History">Historia</a></li>
</ul>

<div class="tab-content">
    <div id="Details" class="tab-pane fade in active">
        <div class="panel panel-default">
            <div id="divPurchaseDetails" class="panel-body dtContainer table-responsive">
                @Html.Partial("_PurchaseOrderDetails", Model.PurchaseOrderDetails)
            </div>
        </div>
    </div>

    <div id="History" class="tab-pane fade">
        <div class="panel panel-default">
            <div class="panel-body dtContainer table-responsive">
                @Html.Partial("_PurchaseOrderHistories", Model.PurchaseOrderHistories)
            </div>
        </div>
    </div>
</div>

