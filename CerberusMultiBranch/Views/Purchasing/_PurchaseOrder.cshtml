@model PurchaseOrder
@using CerberusMultiBranch.Models.Entities.Purchasing
@using CerberusMultiBranch.Models

@Html.HiddenFor(m => m.ProviderId)

@Html.HiddenFor(m => m.PurchaseOrderId)

<h4 id="divFolio" class="col-md-3 col-lg-2 alert alert-dark" title="Folio de la orden de compra">
    @Model.Folio
</h4>
<h4 id="divStatus" class="col-lg-offset-8 col-lg-2 col-md-offset-7 col-md-2" title="@Model.PurchaseStatus.Description">
    @Model.PurchaseStatus.Name<br />
</h4>

<hr />

<div class="panel panel-default">
    @Html.HiddenFor(model => model.TaxRate)
    @Html.HiddenFor(model => model.TaxAmount)
    @Html.HiddenFor(model => model.Freight)
    
    @Html.HiddenFor(model => model.TotalDue)

    <div class="panel-body small">
        <div class="form-group col-md-4">
            @Html.LabelFor(m => m.BranchId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-industry"></i></span>
                @Html.EditorFor(model => model.Branch.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-3">
            @Html.LabelFor(m => m.PurchaseTypeId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-map"></i></span>
                @Html.EditorFor(model => model.PurchaseType.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>
        <div class="form-group col-md-2">
            @Html.Label("Días de Crédito", htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar"></i></span>
                @Html.EditorFor(model => model.DaysToPay, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(m => m.OrderDate, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                <div class="form-control text-uppercase input-sm">
                    @(Model.OrderDate != null ? Model.OrderDate.Value.ToString("dd/MM/yyyy") : "--/--/----")
                </div>
            </div>
        </div>

        <div class="form-group col-md-7">
            @Html.LabelFor(m => m.ProviderId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-handshake-o"></i></span>
                @Html.EditorFor(model => model.Provider.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.Label("IVA", htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                @Html.EditorFor(model => model.TaxRate, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>


        <div class="form-group col-md-2">
            @Html.LabelFor(m => m.DeliveryDate, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-calendar-o"></i></span>
                <div class="form-control text-uppercase input-sm">
                    @(Model.DeliveryDate != null ? Model.DeliveryDate.Value.ToString("dd/MM/yyyy") : "--/--/----")
                </div>
            </div>
        </div>

        <div class="form-group col-md-3">
            @Html.LabelFor(m => m.ShipMethodId, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-ship"></i></span>
                @Html.EditorFor(model => model.ShipMethod.Name, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Freight, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.EditorFor(model => model.Freight, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Insurance, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                @Html.EditorFor(model => model.Insurance, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true, id="txtDiscount" } })
            </div>
        </div>

        <div class="form-group col-md-2">
            @Html.LabelFor(model => model.Bill, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-file-excel-o"></i></span>
                @Html.EditorFor(model => model.Bill, new { htmlAttributes = new { @class = "form-control text-uppercase input-sm", autocomplete = "off", @readonly = true } })
            </div>
        </div>
       
    </div>
    <div class="panel-footer">
        @if (Model.CanRevise)
        {
            <button class="btn btn-primary btn-sm" type="button" title="Revisia la orden para envíarla a autorización" onclick="BeginAction()">
                <span class="fa fa-eye"></span>
                Revisión
            </button>
        }

        @if (Model.CanAuthorize)
        {
            <button  class="btn btn-primary btn-sm" type="button" title="Autoriza la orden de compra y la envía por correo al proveedor" onclick="BeginAction()">
                <span class="fa fa-check"></span>
                Autorización
            </button>
        }

        @if (Model.CanSend)
        {
            <button class="btn btn-primary btn-sm" type="button" title="Ea envía por correo al proveedor, esta acción es opcional" onclick="BeginAction()">
                <span class="fa fa-paper-plane"></span>
                Enviar a Proveedor
            </button>
        }
        @if (Model.CanReceive)
        {
            <button class="btn btn-success btn-sm" type="button" title="Recibe los articulos en el almacen" onclick="BeginAction()">
                <span class="fa fa-cubes"></span>
                Recibir
            </button>
        }
    </div>
</div>

<ul class="nav nav-pills small">
    <li class="active"><a data-toggle="pill" href="#Details">Partidas</a></li>
    <li><a data-toggle="pill" href="#History">Historia</a></li>
</ul>

<div class="tab-content">
    <div id="Details" class="tab-pane fade in active dtContainer">
        <div class="panel panel-default">
            <div class="panel-body dtContainer">
                @Html.Partial("_PurchaseOrderDetails", Model.PurchaseOrderDetails)
            </div>
        </div>
    </div>
    <div id="History" class="tab-pane fade">
        <div class="panel panel-default">
            <div class="panel-body dtContainer">
                @Html.Partial("_PurchaseOrderHistories", Model.PurchaseOrderHistories)
            </div>
        </div>
    </div>
</div>


<script>

    $(document).ready(function ()
    {
        if ('@Model.Folio'.length > 0)
        {
            $("#divFolio").removeClass("alert alert-dark");
            $("#divFolio").addClass("alert alert-success");
        }


        //status color
        switch ('@Model.PurchaseStatusId')
        {
            case '@PStatus.InRevision':
                $("#divStatus").addClass("alert alert-dark");
                break;
            case '@PStatus.Revised':
                $("#divStatus").addClass("alert alert-success");
                break;
            case '@PStatus.Authorized':
                $("#divStatus").addClass("alert alert-success");
                break;
            case '@PStatus.Watting':
                $("#divStatus").addClass("alert alert-success");
                break;

            case '@PStatus.Partial':
                $("#divStatus").addClass("alert alert-attention");
                break;

            case '@PStatus.Received':
                $("#divStatus").addClass("alert alert-success");
                break;

            case '@PStatus.SendingFailed':
                $("#divStatus").addClass("alert alert-warning");
                break;

            case '@PStatus.NotAuthorized':
                $("#divStatus").addClass("alert alert-danger");
                break;
          
            case '@PStatus.Canceled':
                $("#divStatus").addClass("alert alert-danger");
                break;
        }
    });

    function BeginAction()
    {
        ShowLoading('static');

        ExecuteAjax('@Url.Action("BeginAction", "Purchasing")', { id: $("#PurchaseOrderId").val() }, function (response)
        {
            HideLoading(function ()
            {
                if ($.isPlainObject(response))
                {
                    ShowNotify(response.Header, response.Result, response.Body, 3000);
                    Reload();
                }
                else
                    ShowModal(response, 'static');
            });
        });
    }

   
    function SendPurchaseOrder()
    {
        ShowLoading('static');

        ExecuteAjax('@Url.Action("SendPurchaseOrder", "Purchasing")', { id: $("#PurchaseOrderId").val() }, function (response)
        {
            HideLoading(function () {
                ShowNotify(response.Header, response.Result, response.Body, 3000);
                Reload();

            });
        });
    }

 
    function Reload()
    {
        ShowLoading();

        ExecuteAjax('@Url.Action("ReloadPurchaseOrder", "Purchasing")', { id: $("#PurchaseOrderId").val() }, function (response) {
            HideLoading(function () {
                $("#divPurchaseOrder").html(response);
            });
        });
    }
</script>