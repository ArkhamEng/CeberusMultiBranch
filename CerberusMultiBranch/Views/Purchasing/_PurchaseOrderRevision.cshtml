@model PurchaseOrder
@using CerberusMultiBranch.Support
@using CerberusMultiBranch.Models.Entities.Purchasing

<div class="panel panel-primary">
    <div class="panel-heading">
        <button class="close" type="button" onclick="HideModal(null,true)" title="Cierra ventana"><span class="fa fa-times"></span></button>
        <h4 class="panel-title">
            @switch (Model.PurchaseStatusId)
            {
                case PStatus.InRevision:
                    <span class="fa fa-eye"></span>
                    <a>Revisón de Order de Compra</a>
                    break;
                case PStatus.Revised:
                    <span class="fa fa-check"></span>
                    <a>Autorización de Order de Compra</a>
                    break;
                case PStatus.Authorized:
                case PStatus.SendingFailed:
                    <span class="fa fa-paper-plane"></span>
                    <a>Envío de Orden de Compra</a>
                    break;
                case PStatus.Watting:
                case PStatus.Partial:
                    <span class="fa fa-cubes"></span>
                    <a>Recepción de Orden de Compra</a>
                    break;
                case PStatus.Expired:
                    <span class="fa fa-paper-plane"></span>
                    <a>Solicitar cambio</a>
                    break;
            }

        </h4>
    </div>
    <div class="panel-body small">

        @if (Model.PurchaseStatusId == PStatus.Expired)
        {
            <div class="form-group col-md-12 text-center">
                <h3>
                    Estas a punto de solicitar un cambio en la orden de compra, no podras recibir ninguna partida hasta que el cambio sea autorizado
                </h3>
            </div>
        }
        else if (Model.PurchaseStatusId == PStatus.Watting)
        {
            <div class="form-group col-md-12 text-center">
                <h3>
                    Estas por realizar una recepción, los costos y descuentos ya no podran ser modificados
                </h3>
            </div>
        }
        else
        {
            <div class="form-group col-md-12 text-center">
                <h3>
                    <span class="fa fa-handshake-o"></span>
                    @Model.Provider.Name
                </h3>
            </div>

            <div class="form-group col-md-12 text-center">
                <h4>
                    Monto Total
                    @Model.TotalDue.ToMoney()
                </h4>
            </div>
        }

        @if (Model.PurchaseStatusId == PStatus.Authorized || Model.PurchaseStatusId == PStatus.SendingFailed)
        {
            <div class="form-group col-md-12">
                @Html.LabelFor(model => model.Provider.Email, htmlAttributes: new { @class = "control-label" }) <a class="text-danger">(puedes usar varios separados por coma)</a>
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-envelope"></i></span>
                    @Html.EditorFor(model => model.Provider.Email, new { htmlAttributes = new { @class = "form-control text-lowecase input-sm", autocomplete = "off" } })
                </div>
                @Html.ValidationMessageFor(model => model.Provider.Email, "", new { @class = "text-danger" })
            </div>
        }

        @if (Model.PurchaseStatusId == PStatus.Watting)
        {
            <div class="form-group col-md-8">
                @Html.LabelFor(m => m.ShipMethodId, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-ship"></i></span>
                    @Html.DropDownListFor(model => model.ShipMethodId, (SelectList)ViewBag.ShipMethodes, htmlAttributes: new { @class = "form-control text-uppercase input-sm" })
                </div>
            </div>
            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Freight, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                    @Html.EditorFor(model => model.Freight, new { htmlAttributes = new { @class = "form-control text-lowecase input-sm", autocomplete = "off", id= "addFreight" } })
                </div>
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Insurance, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-dollar"></i></span>
                    @Html.EditorFor(model => model.Insurance, new { htmlAttributes = new { @class = "form-control text-lowecase input-sm", autocomplete = "off", id = "addInsurance" } })
                </div>
            </div>

            <div class="form-group col-md-4">
                @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label" })
                <div class="input-group">
                    <span class="input-group-addon"><i class="fa fa-percent"></i></span>
                    @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control text-lowecase input-sm", autocomplete = "off", id = "addDiscount" } })
                </div>
            </div>
        }


        <div class="col-md-12 form-group">
            @Html.LabelFor(model => model.Comment, htmlAttributes: new { @class = "control-label" })
            <div class="input-group">
                <span class="input-group-addon"><i class="fa fa-comment-o"></i></span>
                @Html.TextAreaFor(model => model.Comment, 3, 1, htmlAttributes: new
               {
                   @class = "form-control text-uppercase input-sm",
                   placeholder = "Escribe un comentario..",
                   id = "txtComment"
               })
            </div>
            @Html.ValidationMessageFor(model => model.Comment, "", new { @class = "text-danger" })
        </div>


    </div>
    <div class="panel-footer clearfix">
        @switch (Model.PurchaseStatusId)
        {
            case PStatus.InRevision:
                <button class="btn  btn-sm btn-success" title="Marca la orden como revizada" onclick="SetAction('@Model.PurchaseOrderId', true,false)">
                    <span class="fa fa-eye"></span>
                    Revizado
                </button>

                <button class="btn  btn-sm btn-warning" title="Rechaza la orden de compra" onclick="SetAction('@Model.PurchaseOrderId',false,false)">
                    <span class="fa fa-eye-slash"></span>
                    Rechazar
                </button>
                break;
            case PStatus.Revised:
                <button class="btn  btn-sm btn-success" title="Autoriza el envío de la orden de compra" onclick="SetAction('@Model.PurchaseOrderId', true,false)">
                    <span class="fa fa-check"></span>
                    Autorizar
                </button>

                <button class="btn  btn-sm btn-warning" title="Rechaza el envío de la orden de compra" onclick="SetAction('@Model.PurchaseOrderId',false,false)">
                    <span class="glyphicon glyphicon-ban-circle"></span>
                    Rechazar
                </button>
                break;
            case PStatus.Authorized:
            case PStatus.SendingFailed:
                <button class="btn  btn-sm btn-success" title="Envía la orden de compra al proveedor" onclick="SetAction('@Model.PurchaseOrderId', true,true)">
                    <span class="fa fa-paper-plane"></span>
                    Enviar
                </button>

                <button class="btn  btn-sm btn-warning" title="Omite el envío por correo y pasa a espera de mercancía" onclick="SetAction('@Model.PurchaseOrderId',false,true)">
                    <span class="fa fa-forward"></span>
                    Omitir envío
                </button>
                break;
            case PStatus.Watting:
            case PStatus.Partial:
                <button class="btn  btn-sm btn-success" title="Envía la orden de compra al proveedor" onclick="Receive('@Model.PurchaseOrderId')">
                    <span class="fa fa-cubes"></span>
                    Almacenar
                </button>
                break;
            case PStatus.Expired:
                <button class="btn  btn-sm btn-warning" title="Solicitar cambio en la orden" onclick="RequestChange('@Model.PurchaseOrderId')">
                    <span class="fa fa-paper-plane"></span>
                    Solicitar
                </button>
                break;

        }

        <button class="btn btn-sm btn-danger pull-right" title="Cierra la ventana" onclick="HideModal(null,true)">
            <span class="fa fa-times"></span>
            Cerrar
        </button>
    </div>
</div>

