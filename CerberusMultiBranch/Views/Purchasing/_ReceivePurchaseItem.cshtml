
@model CerberusMultiBranch.Models.ViewModels.Operative.ProductReceptionViewModel

<div class="panel panel-primary">
    <div class="panel-heading">
        <button class="close" type="button" onclick="HideModal(null,true)">
            <span class="fa fa-times"></span>
        </button>
        <h4 class="panel-title">
            <span class="fa fa-cubes"></span>
            Recepción de artículos
        </h4>
    </div>
    <div class="panel-body">
        <div class="panel panel-default">
            <div class="panel-body">
                @Html.HiddenFor(model => model.DetailId)
                @Html.HiddenFor(model => model.Discount)
                <table class="table small">
                    <tr>
                        <td colspan="4">
                            <h4 class="form-group col-md-12 text-center">
                                @Model.Description <br />
                                <strong><span class="fa fa-cubes"></span></strong> @Model.MeasureUnit
                            </h4>
                        </td>
                    </tr>
                    <tr>
                        <td colspan="4">
                            <div id="divAlert" class="alert alert-attention hidden">

                            </div>
                        </td>
                    </tr>
                    <tr>
                        <td>
                            @Html.LabelFor(m => m.RequestedQty, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.RequestedQty, new { htmlAttributes = new { @class = "form-control  input-sm", autocomplete = "off", @readonly = true } })
                        </td>
                        <td>
                            @Html.LabelFor(m => m.ReceivedQty, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.ReceivedQty, new { htmlAttributes = new { @class = "form-control input-sm", autocomplete = "off", onkeyup = "SetReceiveQty()", @readonly = true } })
                        </td>
                        <td>
                            @Html.LabelFor(m => m.ComplementQty, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.ComplementQty, new { htmlAttributes = new { @class = "form-control input-sm", autocomplete = "off", onkeyup = "SetComplement()", @readonly = true } })
                        </td>
                        <td>
                            @Html.LabelFor(m => m.StockedQty, htmlAttributes: new { @class = "control-label" })
                            @Html.EditorFor(model => model.StockedQty, new { htmlAttributes = new { @class = "form-control input-sm", autocomplete = "off", @readonly = true } })
                        </td>
                    </tr>
                    <tr>
                        <td colspan="4">
                            @Html.LabelFor(m => m.Comment, htmlAttributes: new { @class = "control-label" })

                            @Html.TextAreaFor(model => model.Comment, 3, 1, htmlAttributes:
                              new { @class = "form-control text-uppercase input-sm", autocomplete = "off", placeholder = "Escribe un comentario..", })

                            <div class="checkbox" title="Cierra la partida con pendientes y recalcula los montos">
                                <label class="control-label">
                                    @Html.CheckBoxFor(model => model.IsCompleated, new { htmlAttributes = new { @class = "form-control" } })
                                    <strong> Recepción completa </strong>
                                </label>
                            </div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>

        <div id="pnlItems" class="hidden">
            <table id="tbItems" class="table table-bordered small">
                <thead>
                    <tr>
                        <th>Consecutivo</th>
                        <th>Número de serie</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.Serials)
                    {
                        <tr>
                            <td>
                                @item.Consecutive
                            </td>
                            <td>
                                <input id='serialNumber' type='text' value="@item.SerialNumber" class='form-control input-sm' />
                            </td>
                            <td>
                                @item.InsUser
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        @if (Model.SerialsSaved.Count > 0)
        {
            <table class="table table-bordered small">
                <tr>
                    <td>No Serie</td>
                    <td>Fecha Ingreso</td>
                    <td>Usuario</td>
                </tr>

                @foreach (var item in Model.SerialsSaved)
                {
                    <tr>
                        <td>@item.SerialNumber</td>
                        <td>@item.InsDate.ToShortDateString()</td>
                        <td>@item.InsUser</td>
                    </tr>
                }
            </table>
        }

    </div>
    <div class="panel-footer">
        <button class="btn btn-sm btn-primary" type="button" onclick="ApplyReception()">
            <span class="fa fa-check"></span>
            Aceptar
        </button>
    </div>
</div>

<script>
    $(document).ready(function ()
    {
        if (parseInt('@Model.Serials.Count') > 0)
            $("#pnlItems").removeClass("hidden");

        if ('@Model.ReceiveDisabled' == 'False')
            $("#ReceivedQty").attr("readonly", false);

        if ('@Model.ComplementDisabled' == 'False')
            $("#ComplementQty").attr("readonly", false);
    });


    function SetReceiveQty(input) {
        var received = parseFloat($("#ReceivedQty").val());

        if (received < 0) {
            $("#ReceivedQty").val(0);
            received = 0;
        }
        $("#StockedQty").val(received);

        SetRowsForSerial(received);
    }

    function SetComplement() {
        var complement = parseFloat($("#ComplementQty").val());
        var received = parseFloat($("#ReceivedQty").val());

        if (complement < 0) {
            parseFloat($("#ComplementQty").val(0));
            ShowNotify("Cantidad incorrecta", "warning", "La cantidad no puede ser menor a 0", 3000);
            return;
        }

        $("#StockedQty").val(complement + received);

        SetRowsForSerial(complement);
    }

    function SetRowsForSerial(quantity) {
        if ('@Model.IsTrackable' == 'True' && parseFloat(quantity) > 0) {
            $("#tbItems tbody").empty();

            $("#pnlItems").removeClass('hidden');

            for (i = 0; i < quantity; i++) {
                var consecutive = parseInt(i) + 1;
                $("#tbItems tbody").append("<tr><td>" + consecutive + "</td><td><input id='serialNumber' type='text' class='form-control input-sm' /></td><td></td></tr>");
            }
        }
        else {
            $("#pnlItems").addClass('hidden');
        }
    }


    function ApplyReception() {
        var serials = [];
        $("#tbItems tbody tr").each(function (index, row) {
            var item = { SerialNumber: $(row).find("#serialNumber").val(), Consecutive: index + 1 }
            serials.push(item);
        });

        var detail =
        {
            DetailId: $("#DetailId").val(),
            ReceivedQty: $("#ReceivedQty").val(),
            ComplementQty: $("#ComplementQty").val(),
            RequestedQty: $("#RequestedQty").val(),
            StockedQty: $("#StockedQty").val(),
            Discount: $("#Discount").val(),
            Comment: $("#Comment").val(),
            IsCompleated: (parseFloat($("#StockedQty").val()) >= parseFloat($("#RequestedQty").val())) || $("#IsCompleated").prop("checked"),
            Serials: serials,
            HasValues: true,
        };


        var subTotal = 0;


        $("#tbPurchaseDetails tbody tr").each(function (index, row)
        {
            var id = $(row).find("#item_PurchaseOrderDetailId").val();
            var option = $("#ddlAction").val();

            if (id == detail.DetailId) {
                var unitPrice = parseFloat($(row).find("#item_UnitPrice").val());

                var lineTotal = detail.IsCompleated ? (detail.StockedQty * unitPrice) : ((detail.RequestedQty * unitPrice));

                if (detail.Discount > 0)
                    lineTotal = lineTotal - parseFloat(lineTotal * (detail.Discount / 100));

                $(row).find("#tdReceivedQty").text(detail.ReceivedQty);
                $(row).find("#tdRejectedQty").text(detail.ComplementQty);
                $(row).find("#tdStockedQty").text(detail.StockedQty);

                $(row).find("#tdLineTotal").text(GetCurrency(lineTotal));

                $(row).find("#item_LineTotal").val(lineTotal);

                if (!detail.IsCompleated)
                    $(row).addClass("alert alert-attention");
                else //si se marca como completo, recalcula el costo para inventariar
                {
                    $(row).removeClass("alert alert-attention");
                    $(row).addClass("alert alert-success");
                }
            }

            var lt = $(row).find("#item_LineTotal");

            subTotal = subTotal + parseFloat(lt.val());
        });


        var taxRate = parseFloat($("#TaxRate").val());

        var expenses = parseFloat($("#Freight").val()) + parseFloat($("#Insurance").val());

        var taxAmount = parseFloat(subTotal * taxRate / 100);

        var totalDue = parseFloat(parseFloat(subTotal) + taxAmount);

        var disPer = parseFloat($("#Discount").val());

        var discount = 0.0;

        if (disPer > 0 && disPer < 100)
            discount = totalDue - (totalDue * (disPer / 100));
        else if (disPer == 100)
            discount = totalDue;
      

      
        $("#tdSubTotal").text(GetCurrency(subTotal));

        $("#tdTaxAmount").text(GetCurrency(taxAmount));

        $("#tdDiscount").text(GetCurrency(discount));


        totalDue = totalDue - discount + expenses;

        $("#tdTotalDue").text(GetCurrency(totalDue));


        var added = false;

        $(ReceivedDetails).each(function (index, item)
        {
            if (item.DetailId == detail.DetailId) {
                item.ReceivedQty = detail.ReceivedQty;
                item.RequestedQty = detail.RequestedQty;
                item.ComplementQty = detail.ComplementQty;
                item.StockedQty = detail.StockedQty;
                item.Comment = detail.Comment;
                item.Serials = detail.Serials;
                IsCompleated = detail.IsCompleated
                added = true;
            }
        });

        if (!added)
            ReceivedDetails.push(detail);

        console.log(detail);

        HideModal(null, true);
    }


</script>