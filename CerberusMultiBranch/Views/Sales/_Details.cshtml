@model ICollection<CerberusMultiBranch.Models.Entities.Operative.TransactionDetail>

@Html.ValidationMessage("AddDetail", "", new { @class = "text-danger" })

<table id="tbDetails" class="table table-striped">
    <thead>
        <tr>
            <th/>
            <th class="text-center">@Html.DisplayName("Descripción")</th>
            <th class="text-center">@Html.DisplayName("Precio")</th>
            <th class="text-center">@Html.DisplayName("Cantidad")</th>
            <th class="text-center">@Html.DisplayName("Disponibles")</th>
            <th class="text-center">@Html.DisplayName("Total")</th>
            <th hidden></th>
            <th hidden></th>
        </tr>
    </thead>
    <tbody>
        @{int i = 0; }
        @foreach (var item in Model)
        {
                if (item == null)
                {
                    break;
                }

                var ProductId = "TransactionDetails[" + i + "].ProductId";
                var TransactionId = "TransactionDetails[" + i + "].TransactionId";
                var Amount = "TransactionDetails[" + i + "].Amount";
                var Price = "TransactionDetails[" + i + "].Price";
                var Quantity = "TransactionDetails[" + i + "].Quantity";

            <tr>
                <td class="col-md-1">
                    @if (item.Product.Images.Count > 0)
                    {
                        <img src="@item.Product.Images.First().Path" class="img-responsive" />
                    }
                    else
                    {
                        <img src="~/Content/Images/sinimagen.jpg" class="img-responsive" />
                    }
                </td>
                <td>
                    <h4>
                        @Html.DisplayFor(modelItem => item.Product.Name)
                    </h4>
                    <h5>
                        @Html.DisplayFor(modelItem => item.Product.Code)
                    </h5>
                </td>

                <td class="col-md-2 text-center">
                    <h4 id="txtPrice" class="text-info" onmouseover="SetPointer(this)" onclick="ChangePrice(@item.ProductId,@item.Product.StorePrice,@item.Product.DealerPrice,@item.Product.WholesalerPrice)">
                        <u>
                            @Html.DisplayFor(modelItem => item.Price)
                        </u>
                    </h4>
                </td>
                <td class="col-md-1 text-info text-center">
                   @if (!item.Sale.Compleated)
                   {
                    <input name="@Quantity" class="form-control text-right" value="@item.Quantity" max="@item.Product.BranchProducts.FirstOrDefault().Stock"
                           type="number" min="1" onkeydown="return false" onmouseup="QuantityChanged(this)" />
                   }
                   else
                   {<h4>
                        @Html.DisplayFor(modelItem => item.Quantity)
                    </h4>
                   }

                </td>
                <td class="text-center">
                    <label id="lblAvailable" class="badge bg-danger">
                        @item.Product.BranchProducts.FirstOrDefault(bp => bp.BranchId == item.Transaction.BranchId).Stock
                    </label>
                </td>
                <td class="text-right">
                    <h4 id="txtAmount" class="text-right">
                        @Html.DisplayFor(modelItem => item.Amount)
                    </h4>
                </td>
                <td>
                    @if (!item.Sale.Compleated)
                    {
                        <div class="btn-group">
                            <button class="btn btn-danger btn-xs" type="button" onclick="RemoveFromCart('@item.ProductId','@item.TransactionId')"
                                    title="Quitar del carritos">
                                <span class="glyphicon glyphicon-trash"></span>
                            </button>
                        </div>
                    }
                </td>
                <td hidden>
                    <input name="@ProductId" value="@item.ProductId" />
                    <input name="@TransactionId" value="@item.TransactionId" />
                    <input name="@Amount" value="@item.Amount" />
                    <input name="@Price" value="@item.Price" />
                </td>
            </tr>

            i++;
        }
    </tbody>
    <tfoot>
        <tr>
            <td colspan="5" >
            </td>>
            <td>
                <h4 class="text-danger text-right">
                    <label id="lblTotalAmount">
                    </label>
                </h4>
            </td>
            <td></td>
        </tr>
    </tfoot>
</table>

@Html.Partial("_PriceSelector")

<script>
    $(document).ready(function () 
    {
        $("#TotalAmount").val('@Model.Sum(d => d.Amount)');

        SetTotalAmount();
        CompleateProgress();
    });

    function ChangePrice(pId,sPrice,dPrice,wPrice)
    {
        $("#txtProductId").val(pId);
        $("#txtSPrice").val(sPrice);
        $("#txtDPrice").val(dPrice);
        $("#txtWPrice").val(wPrice);

        $("#ModalPrice").modal("show");

     
    }

    function QuantityChanged(input) {
        quantity = parseFloat($(input).val());

        var row = $(input).parent().parent();
        cells = row.find("td");

        var price = row.find("#txtPrice").text();

        var available = parseFloat(row.find("#lblAvailable").text());

        if (quantity > available)
            ShowMessage("Cantidad Invalida", "Estas Tratando de vender mas productos de los diponibles, verifica existencias!", "warning");

        price = price.replace(/[$,]+/g, "");

        //using two decimal, and regex for add comma each thousand
        var amount = "$" + (quantity * price).toFixed(2).toString().replace(/(\d)(?=(\d\d\d)+(?!\d))/g, "$1,");

        row.find("Amount").val(amount.replace(/[$,]+/g, ""));
        row.find("#txtAmount").text(amount);

        SetTotalAmount();
    }

    function SetTotalAmount() {
        var totalAmount = 0;
        $('#tbDetails > tbody  > tr').each(function () {
            totalAmount += parseFloat($(this).find("#txtAmount").text().replace(/[$,]+/g, ""));
        });

        totalAmount = GetCurrency(totalAmount);
        $("#lblTotalAmount").text(totalAmount);
    }

    function RemoveFromCart(productId, transactionId) {
        var data = {
            transactionId: transactionId,
            productId: productId
        }

        ExecuteAjax('@Url.Action("RemoveFromCart", "Sales")', data, function (data) {
            if (data != 'OK')
                ShowMessage("Upps algo salío mal", data, "warning");
            else
                window.location = window.location.href;
        });
    }

</script>
